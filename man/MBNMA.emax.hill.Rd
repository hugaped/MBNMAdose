% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run.functions.R
\name{MBNMA.emax.hill}
\alias{MBNMA.emax.hill}
\title{Run MBNMA model with an Emax dose-response function (with a Hill parameter)}
\usage{
MBNMA.emax.hill(network, parameters.to.save = NULL, emax = "rel",
  ed50 = "rel", hill = "common", method = "common",
  class.effect = list(), cor = TRUE, var.scale = NULL, pd = "pv",
  parallel = TRUE, likelihood = NULL, link = NULL, priors = NULL,
  arg.params = NULL, ...)
}
\arguments{
\item{network}{An object of class `MBNMA.network`.}

\item{parameters.to.save}{A character vector containing names of parameters
to monitor in JAGS}

\item{emax}{Refers to the Emax parameter of the Emax dose-response function.
Can take either `"rel"`, `"common"`, `"random"`, or be assigned a numeric value (see details).}

\item{ed50}{Refers to the ED50 parameter of the Emax dose-response function.
Can take either `"rel"`, `"common"`, `"random"`, or be assigned a numeric value (see details).}

\item{hill}{Refers to the Hill parameter of the Emax dose-response function.
Can take either `"rel"`, `"common"`, `"random"`, or be assigned a numeric value (see details).}

\item{method}{Can take either `"common"` or `"random"` to indicate whether relative effects
should be modelled with between-study heterogeneity or not (see LINK `Details`).}

\item{class.effect}{A list of named strings that determines which dose-response
parameters to model with a class effect and what that effect should be
(`"common"` or `"random"`). For example: `list("beta.2"="fixed", "beta.3"="random")`.}

\item{cor}{A boolean object that indicates whether correlation should be modelled
between relative effect dose-response parameters (`TRUE`) or not (`FALSE`). This is
automatically set to `FALSE` if class effects are modelled.}

\item{var.scale}{A numeric vector indicating the relative scale of variances between
correlated dose-response parameters when relative effects are modelled on more than
one dose-response parameter and `cor=TRUE` (see `Details` LINK). Each element of
the vector refers to the relative scale of each of the dose-response parameters that is
modelled using relative effects.}

\item{pd}{Can take either:
* `pv` only pV will be reported (as automatically outputted by R2jags).
* `plugin` calculates pD by the plug-in
method REF. It is faster, but may output negative
non-sensical values, due to skewed deviances that can arise with non-linear models.
* `pd.kl` calculates pD by the Kullbackâ€“Leibler divergence REF. This
will require running the model for additional iterations but
will always produce a positive result.
* `popt` calculates pD using an optimism adjustment which allows for calculation
of the penalized expected deviance REF.}

\item{parallel}{A boolean value that indicates whether JAGS should be run in
parallel (`TRUE`) or not (`FALSE`). If `TRUE` then the number of cores to
use is automatically calculated.}

\item{likelihood}{A string indicating the likelihood to use in the model. Can take either `"binomial"`,
`"normal"` or `"poisson"`. If left as `NULL` the likelihood will be inferred from the data.}

\item{link}{A string indicating the link function to use in the model. Can take any link function
defined within JAGS (`"logit"`, `"log"`, `"probit"`, `"cloglog"`) or be assigned the value `"identity"` for
and identity link function. If left as `NULL` the link function will be automatically assigned based
on the likelihood.}

\item{priors}{A named list of parameter values (without indices) and
replacement prior distribution values given as strings
**using distributions as specified in JAGS syntax**.}

\item{arg.params}{Contains a list of arguments sent to `MBNMA.run()` by time-course
specific wrapper functions}

\item{...}{Arguments to be sent to R2jags.}
}
\value{
An object of S3 class `c("MBNMA", "rjags")`` containing parameter
  results from the model. Can be summarized by `print()` and can check
  traceplots using `traceplot()` (from the `R2jags` package).

  Nodes that are automatically monitored (if present in the model) have the
  following interpretation.

  These will have an additional suffix that relates
  to the name/number of the dose-response parameter to which they correspond
  (e.g. `d.et50` or `d.1`):
  * `d` The pooled effect for each agent for a given dose-response
  parameter. Will be estimated by the model if dose-respones parameters (`beta.1`,
  `beta.2`, `beta.3`) are set to `"rel"`.
  * `sd` (without a suffix) - the between-study SD (heterogeneity) for relative effects, reported if
  `method="random"`.
  * `D` The class effect for each class for a given dose-response
  parameter. Will be estimated by the model if specified in `class.effect`.
  * `sd.D` The within-class SD for different agents within the same class. Will
  be estimated by the model if any dose-response parameter in `class.effect` is
  set to `"random"`.
  * `beta` The absolute value of a given dose-response parameter across the whole
  network (does not vary by agent/class). Will be estimated by the model if
  dose-response parameters (`beta.1`, `beta.2`, `beta.3`) are set to `"common"`
  or `"random"`.
  * `sd` (with a suffix) - the between-study SD (heterogeneity) for absolute dose-response
  parameters, reported if `beta.1`, `beta.2` or `beta.3` are set to `"random"`
  * `totresdev` The residual deviance of the model
  * `deviance` The deviance of the model


  If there are errors in the JAGS model code then the object will be a list
  consisting of two elements - an error message from JAGS that can help with
  debugging and `model.arg`, a list of arguments provided to `MBNMA.run()`
  which includes `jagscode`, the JAGS code for the model that can help
  users identify the source of the error.
}
\description{
Fits a Bayesian model-based network meta-analysis (MBNMA) with a defined
dose-response function. Follows the methods
of MAWDSLEY REF. This function acts as a wrapper for `MBNMA.run()` that
uses more clearly defined parameter names.
}
\section{Dose-response parameters}{

* `"rel"` implies that relative effects should be pooled for this dose-resonse
parameter, that vary by agent.
* `"common"` implies that all studies estimate the same true absolute effect
(akin to a "fixed effect" meta-analysis) across the whole network
* `"random"` implies that all studies estimate a separate true absolute effect, but
that each of these true effects vary randomly around a true mean effect. This
approach allows for modelling of between-study heterogeneity.
* `numeric()` Assigned a numeric value. It indicates that
this dose-response parameter should not be estimated from the data but should be
assigned the numeric value determined by the user. This can be useful for fixing
specific dose-response parameters (e.g. Hill parameters in Emax functions) to a value.
}

\examples{
# Using the triptans data
network <- MBNMA.network(HF2PPITT)

# Fit an Emax (with Hill parameter) dose-response MBNMA with random treatment
#effects on Emax, ED50 and Hill
emax.hill <- MBNMA.emax.hill(network, emax="rel", ed50="rel", hill="rel",
  method="random")

# Fit an Emax (with Hill parameter) dose-response MBNMA with common treatment
#effects on Emax, a single random parameter estimated for ED50
#and a single common parameter estimated for Hill
emax.hill <- MBNMA.emax.hill(network, emax="rel", ed50="random", hill="common",
  method="common")

# Assign a specific numerical value for Hill parameter
emax.hill <- MBNMA.emax.hill(network, emax="rel", ed50="rel", hill=5)


########## Class effects ##########

# Generate a dataset with one class for active treatments and one for placebo
class.df <- HF2PPITT
class.df$class <- ifelse(class.df$agent=="placebo", "placebo", "active")
netclass <- MBNMA.network(class.df)

# Fit an Emax (with Hill parameter) function with common relative effects on
#all parameters and common class effects on ED50 and Hill.
emax.hill <- MBNMA.emax.hill(netclass,
  emax="rel", ed50="rel", hill="rel", method="common",
  class.effect=list(ed50="common", hill="common"))


####### Priors #######

# Obtain priors from an Emax (with Hill parameter) function with
#relative effects on Emax and ED50 and a single common parameter for Hill
emax.hill <- MBNMA.emax.hill(network,
  emax="rel", ed50="rel", hill="common", method="common")
print(emax.hill$model.arg$priors)

# Set new more informative prior distributions
newpriors <- list(beta.hill = "dnorm(0,0.5) T(,0)")

emax.hill <- MBNMA.emax.hill(network,
  emax="rel", ed50="rel", hill="common", method="common",
  priors=newpriors)


########## Sampler options ##########

# Change the number of MCMC iterations, the number of chains, and the thin
emax.hill <- MBNMA.emax.hill(network, emax="rel", ed50="rel", hill=2,
  n.iter=5000, n.thin=5, n.chains=4)

# Calculate effective number of parameters via plugin method
emax.hill <- MBNMA.emax.hill(network, emax="rel", ed50="rel", hill=2,
  pd="plugin")

# Calculate effective number of parameters via Kullback-Leibler method
emax.hill <- MBNMA.emax.hill(network, emax="rel", ed50="rel", hill=2,
  pd="pd.kl")


####### Examine MCMC diagnostics (using mcmcplots package) #######

# Density plots
mcmcplots::denplot(emax.hill)

# Traceplots
mcmcplots::traplot(emax.hill)

# Autocorrelation plots
mcmcplots::caterplot(emax.hill, "d.emax")


########## Output ###########

# Print R2jags output and summary
print(emax.hill)
summary(emax.hill)

# Plot forest plot of results
plot(emax.hill)

}
\references{
\insertAllCited
}
