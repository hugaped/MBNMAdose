% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run.functions.R
\name{MBNMA.run}
\alias{MBNMA.run}
\title{Run MBNMA dose-response models}
\usage{
MBNMA.run(network, parameters.to.save = NULL, fun = "linear",
  user.fun = NULL, beta.1 = "rel", beta.2 = NULL, beta.3 = NULL,
  method = "common", class.effect = list(), cor = TRUE,
  var.scale = NULL, pd = "pv", parallel = TRUE, likelihood = NULL,
  link = NULL, priors = NULL, model.file = NULL, arg.params = NULL,
  ...)
}
\arguments{
\item{network}{An object of class `MBNMA.network`.}

\item{parameters.to.save}{A character vector containing names of parameters
to monitor in JAGS}

\item{fun}{is a character specifying a functional form to be assigned to the
dose-response. Options are given in `details`.}

\item{user.fun}{A character specifying any relationship including `dose` and
one/several of: `beta.1`, `beta.2`, `beta.3`.}

\item{beta.1}{Refers to dose-parameter(s) specified within the dose-response function.
Can take either `"rel"`, `"common"`, `"random"`, or be assigned a numeric value (see details).}

\item{beta.2}{Refers to dose-parameter(s) specified within the dose-response function.
Can take either `"rel"`, `"common"`, `"random"`, or be assigned a numeric value (see details).}

\item{beta.3}{Refers to dose-parameter(s) specified within the dose-response function.
Can take either `"rel"`, `"common"`, `"random"`, or be assigned a numeric value (see details).}

\item{method}{Can take either `"common"` or `"random"` to indicate whether relative effects
should be modelled with between-study heterogeneity or not (see LINK `Details`).}

\item{class.effect}{A list of named strings that determines which dose-response
parameters to model with a class effect and what that effect should be
(`"common"` or `"random"`). For example: `list("beta.2"="fixed", "beta.3"="random")`.}

\item{cor}{A boolean object that indicates whether correlation should be modelled
between relative effect dose-response parameters (`TRUE`) or not (`FALSE`). This is
automatically set to `FALSE` if class effects are modelled.}

\item{var.scale}{A numeric vector indicating the relative scale of variances between
correlated dose-response parameters when relative effects are modelled on more than
one dose-response parameter and `cor=TRUE` (see `Details` LINK). Each element of
the vector refers to the relative scale of each of the dose-response parameters that is
modelled using relative effects.}

\item{pd}{Can take either:
* `pv` only pV will be reported (as automatically outputted by R2jags).
* `plugin` calculates pD by the plug-in
method REF. It is faster, but may output negative
non-sensical values, due to skewed deviances that can arise with non-linear models.
* `pd.kl` calculates pD by the Kullbackâ€“Leibler divergence REF. This
will require running the model for additional iterations but
will always produce a positive result.
* `popt` calculates pD using an optimism adjustment which allows for calculation
of the penalized expected deviance REF.}

\item{parallel}{A boolean value that indicates whether JAGS should be run in
parallel (`TRUE`) or not (`FALSE`). If `TRUE` then the number of cores to
use is automatically calculated.}

\item{likelihood}{A string indicating the likelihood to use in the model. Can take either `"binomial"`,
`"normal"` or `"poisson"`. If left as `NULL` the likelihood will be inferred from the data.}

\item{link}{A string indicating the link function to use in the model. Can take any link function
defined within JAGS (`"logit"`, `"log"`, `"probit"`, `"cloglog"`) or be assigned the value `"identity"` for
and identity link function. If left as `NULL` the link function will be automatically assigned based
on the likelihood.}

\item{priors}{A named list of parameter values (without indices) and
replacement prior distribution values given as strings
**using distributions as specified in JAGS syntax**.}

\item{model.file}{A JAGS model written as a character object that can be used
to overwrite the JAGS model that is automatically written based on the
specified options. Useful when ammending priors using replace.prior()}

\item{arg.params}{Contains a list of arguments sent to `MBNMA.run()` by time-course
specific wrapper functions}

\item{...}{Arguments to be sent to R2jags.}
}
\value{
An object of S3 class `c("MBNMA", "rjags")`` containing parameter
  results from the model. Can be summarized by `print()` and can check
  traceplots using `traceplot()` (from the `R2jags` package).

  Nodes that are automatically monitored (if present in the model) have the
  following interpretation.

  These will have an additional suffix that relates
  to the name/number of the dose-response parameter to which they correspond
  (e.g. `d.et50` or `d.1`):
  * `d` The pooled effect for each agent for a given dose-response
  parameter. Will be estimated by the model if dose-respones parameters (`beta.1`,
  `beta.2`, `beta.3`) are set to `"rel"`.
  * `sd` (without a suffix) - the between-study SD (heterogeneity) for relative effects, reported if
  `method="random"`.
  * `D` The class effect for each class for a given dose-response
  parameter. Will be estimated by the model if specified in `class.effect`.
  * `sd.D` The within-class SD for different agents within the same class. Will
  be estimated by the model if any dose-response parameter in `class.effect` is
  set to `"random"`.
  * `beta` The absolute value of a given dose-response parameter across the whole
  network (does not vary by agent/class). Will be estimated by the model if
  dose-response parameters (`beta.1`, `beta.2`, `beta.3`) are set to `"common"`
  or `"random"`.
  * `sd` (with a suffix) - the between-study SD (heterogeneity) for absolute dose-response
  parameters, reported if `beta.1`, `beta.2` or `beta.3` are set to `"random"`
  * `totresdev` The residual deviance of the model
  * `deviance` The deviance of the model


  If there are errors in the JAGS model code then the object will be a list
  consisting of two elements - an error message from JAGS that can help with
  debugging and `model.arg`, a list of arguments provided to `MBNMA.run()`
  which includes `jagscode`, the JAGS code for the model that can help
  users identify the source of the error.
}
\description{
Fits a Bayesian dose-response for model-based network meta-analysis
(MBNMA) that can account for multiple doses of different agents by
applying a desired dose-response function. Follows the methods
of Mawdsley (REF).
}
\details{
When relative effects are modelled on more than one dose-response parameter and
`cor=TRUE`, correlation between the dose-response parameters is automatically
estimated using a vague Wishart prior. This prior can be made slightly more informative
by specifying the relative scale of variances between the dose-response parameters using
`var.scale`.
}
\section{Dose-response parameters}{

* `"rel"` implies that relative effects should be pooled for this dose-resonse
parameter, that vary by agent.
* `"common"` implies that all studies estimate the same true absolute effect
(akin to a "fixed effect" meta-analysis) across the whole network
* `"random"` implies that all studies estimate a separate true absolute effect, but
that each of these true effects vary randomly around a true mean effect. This
approach allows for modelling of between-study heterogeneity.
* `numeric()` Assigned a numeric value. It indicates that
this dose-response parameter should not be estimated from the data but should be
assigned the numeric value determined by the user. This can be useful for fixing
specific dose-response parameters (e.g. Hill parameters in Emax functions) to a value.
}

\section{Dose-response function}{

  Several general dose-response functions are provided, but a
  user-defined dose-response relationship can instead be used.

  Built-in time-course functions are:
  * `"linear"`: `beta.1` refers to the gradient
  * `"exponential"`: `beta.1` refers to the rate of gain/decay
  * `"emax"` (emax without a Hill parameter): `beta.1` refers to
  Emax parameter, `beta.2` refers to ET50 parameter
  * `"emax.hill"` (emax with a Hill parameter): `beta.1` refers to Emax parameter, `beta.2` refers
  to ET50 parameter, `beta.3` refers to Hill parameter
  * `"nonparam.up"` (monotonically increasing non-parametric dose-response relationship following
  the method of OWENS REF)
  * `"nonparam.down"` (monotonically decreasing non-parametric dose-response relationship following
  the method of OWENS REF)
  * `"user"` (user-defined function: `user.fun` must be specified in arguments)
}

\examples{
# Using the triptans data
network <- MBNMA.network(HF2PPITT)


######## Dose-response functions ########

# Fit a dose-response MBNMA with a linear function and common treatment effects
result <- MBNMA.run(network, fun="linear", beta.1="rel", method="common")

# Fit a dose-response MBNMA with an exponential function and random treatment effects
result <- MBNMA.run(network, fun="exponential", beta.1="rel", method="random")

# Fit a user-defined function (quadratic)
fun.def <- "(beta.1 * dose) + (beta.2 * (dose^2))"
result <- MBNMA.run(network, fun="user", user.fun=fun.def,
  beta.1="rel", beta.2="rel", method="common")

# Fit an Emax function with a single random (exchangeable) parameter estimated
#for ED50 and common treatment effects on relative Emax effects
result <- MBNMA.run(network, fun="emax",
  beta.1="rel", beta.2="random", method="common")

# Fit an Emax function with a Hill parameter, with a fixed value for the Hill parameter
#provided to the model and random relative effects on Emax and ED50 (which will
#therefore be modelled with a correlation between them).
result <- MBNMA.run(network, fun="emax.hill",
  beta.1="rel", beta.2="rel", beta.3=5, method="random")


########## Class effects ##########

# Generate a dataset with one class for active treatments and one for placebo
class.df <- HF2PPITT
class.df$class <- ifelse(class.df$agent=="placebo", "placebo", "active")
netclass <- MBNMA.network(class.df)

# Fit an Emax function with common relative effects on Emax and ED50 and
#a random class effect on ED50.
result <- MBNMA.run(netclass, fun="emax",
  beta.1="rel", beta.2="rel", method="common",
  class.effect=list(beta.2="random"))


####### Priors #######

# Obtain priors from an Emax function with random relative effects on Emax and ED50
result <- MBNMA.run(network, fun="emax",
  beta.1="rel", beta.2="rel", method="random")
print(result$model.arg$priors)

# Set new more informative prior distributions
newpriors <- list(sd = "dnorm(0,0.5) T(0,)",
                  inv.R = "dwish(Omega[,],100)")

result <- MBNMA.run(network, fun="emax",
  beta.1="rel", beta.2="rel", method="random",
  priors=newpriors)


########## Sampler options ##########

# Change the number of MCMC iterations, the number of chains, and the thin
result <- MBNMA.run(network, fun="exponential", beta.1="rel", method="random",
  n.iter=5000, n.thin=5, n.chains=4)

# Calculate effective number of parameters via plugin method
result <- MBNMA.run(network, fun="exponential", beta.1="rel", method="random",
  pd="plugin")

# Calculate effective number of parameters via Kullback-Leibler method
result <- MBNMA.run(network, fun="exponential", beta.1="rel", method="random",
  pd="pd.kl")


####### Examine MCMC diagnostics (using mcmcplots package) #######

# Density plots
mcmcplots::denplot(result)

# Traceplots
mcmcplots::traplot(result)

# Autocorrelation plots
mcmcplots::caterplot(result, "d.1")


########## Output ###########

# Print R2jags output and summary
print(result)
summary(result)

# Plot forest plot of results
plot(result)

}
\references{
\insertAllCited
}
