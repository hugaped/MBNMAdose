pred <- predict(emax, E0.data = 0.5)
plot(pred, overlay.split = TRUE, network=network, method="random")
pred <- predict(emax, E0.data = "rbeta(nsims, shape1=1, shape2=5)")
plot(pred)
?facet_wrap
plot(pred, scales="fixed")
expect_error(plot(pred, scales="badger"))
pred <- predict(linear, E0.data = 0.5)
expect_silent(plot(pred))
pred <- predict(emax, E0.data = "rbeta(nsims, shape1=1, shape2=5)")
expect_silent(plot(pred))
# Test disp.obs
expect_error(plot(pred, disp.obs = TRUE))
expect_message(plot(pred, disp.obs = TRUE, network=network))
expect_error(plot(pred, disp.obs = TRUE, network=net.noplac))
pred <- predict(emax, E0.data = 0.5)
expect_error(plot(pred, disp.obs = TRUE, network=net.noplac))
doses <- list("eletriptan"=c(0,1,2,3), "rizatriptan"=c(0.5,1,2))
pred <- predict(emax, E0.data=0.1, exact.doses = doses)
expect_silent(plot(pred, disp.obs=TRUE, network=network))
pred <- predict(emax.noplac, E0.data = 0.5)
expect_silent(plot(pred, disp.obs = TRUE, network=net.noplac))
# Test agent.labs
doses <- list("eletriptan"=c(0,1,2,3), "rizatriptan"=c(0.5,1,2))
pred <- predict(emax, E0.data=0.1, exact.doses = doses)
g <- plot(pred, agent.labs = c("Badger", "Ferret"))
expect_identical(levels(g$data$agent), c("Badger", "Ferret"))
expect_error(plot(pred, agent.labs = c("Badger", "Ferret", "Whippet")))
# Test overlay.split
pred <- predict(linear, E0.data = 0.5)
expect_error(plot(pred, overlay.split = TRUE))
expect_output(plot(pred, overlay.split = TRUE, network=network))
pred <- predict(emax, E0.data = 0.5)
expect_output(plot(pred, overlay.split = TRUE, network=network))
doses <- list("eletriptan"=c(0,1,2,3), "rizatriptan"=c(0,0.5,1,2))
pred <- predict(emax, E0.data=0.1, exact.doses = doses)
expect_output(plot(pred, overlay.split = TRUE, network=network))
doses <- list("eletriptan"=c(1,2,3), "rizatriptan"=c(0.5,1,2))
pred <- predict(emax, E0.data=0.1, exact.doses = doses)
expect_error(plot(pred, overlay.split = TRUE, network=network))
pred <- predict(emax.noplac, E0.data = 0.5)
expect_error(plot(pred, overlay.split = TRUE, network=net.noplac))
# Test method="common"
pred <- predict(linear, E0.data = 0.5)
expect_output(plot(pred, overlay.split = TRUE, network=network, method="random"),
"SD")
pred <- predict(emax, E0.data = 0.5)
expect_output(plot(pred, overlay.split = TRUE, network=network, method="random"),
"SD")
# Test scales
pred <- predict(emax, E0.data = "rbeta(nsims, shape1=1, shape2=5)")
expect_silent(plot(pred, scales="fixed"))
expect_error(plot(pred, scales="badger"))
load(file=file.path("C:", "Users", "hp17602", "OneDrive - University of Bristol",
"Documents", "MBNMA", "Simulation Study", "Time Course", "sim.results_Q2",
"strategies.RData"))
# Load initialvars
load(file=file.path("C:", "Users", "hp17602", "OneDrive - University of Bristol",
"Documents", "MBNMA", "Simulation Study", "Time Course", "sim.results_Q2",
"initialvars.RData"))
load(file=file.path("C:", "Users", "hp17602", "OneDrive - University of Bristol",
"Documents", "MBNMA", "Simulation Study", "Time Course", "sim.results_Q2",
"bestperformresults_na.zero.RData"))
vec <- vector()
nincl <- datasets$datanum[datasets$cor==0 & datasets$tau.emax==0] # no cor/het datasets
for (k in seq_along(nincl)) {
for (m in 1:10) { # 1:10 defines parameters (time-course params and predicted means)
add <- p.errordata[[nincl[k]]][[m]]$p.error
vec <- append(vec, add)
}
}
load(file=file.path("C:", "Users", "hp17602", "OneDrive - University of Bristol",
"Documents", "MBNMA", "Simulation Study", "Time Course", "sim.results_Q2",
"bestperformresults_na.zero.RData"))
load(file=file.path("C:", "Users", "hp17602", "OneDrive - University of Bristol",
"Documents", "MBNMA", "Simulation Study", "Time Course", "sim.results_Q2",
"strategies.RData"))
vec <- vector()
#nincl <- datasets$datanum[datasets$cor>0 & datasets$tau.emax==0] # correlatino datasets
#nincl <- datasets$datanum[datasets$cor==0 & datasets$tau.emax>0] # heterogeneity datasets
nincl <- datasets$datanum[datasets$cor==0 & datasets$tau.emax==0] # no cor/het datasets
for (k in seq_along(nincl)) {
for (m in 1:10) { # 1:10 defines parameters (time-course params and predicted means)
add <- p.errordata[[nincl[k]]][[m]]$p.error
vec <- append(vec, add)
}
}
load(file=file.path("C:", "Users", "hp17602", "OneDrive - University of Bristol",
"Documents", "MBNMA", "Simulation Study", "Time Course", "sim.results_Q2",
"strategies.RData"))
load(file=file.path("C:", "Users", "hp17602", "OneDrive - University of Bristol",
"Documents", "MBNMA", "Simulation Study", "Time Course", "sim.results_Q2",
"bestperformresults_na.zero.RData"))
load(file=file.path("C:", "Users", "hp17602", "OneDrive - University of Bristol",
"Documents", "MBNMA", "Simulation Study", "Time Course", "sim.results_Q2",
"bestperformresults_na.zero.RData"))
perform.df$value
perform.df$measure
unique(perform.df$measure)
vec <- vector()
#nincl <- datasets$datanum[datasets$cor>0 & datasets$tau.emax==0] # correlatino datasets
#nincl <- datasets$datanum[datasets$cor==0 & datasets$tau.emax>0] # heterogeneity datasets
nincl <- datasets$datanum[datasets$cor==0 & datasets$tau.emax==0] # no cor/het datasets
error.df <- perform.df[perform.df$datanum %in% nincl,]
error.df <- error.df[grepl("p\\.error\\.", error.df$measure),]
error.df
error.df$df
unique(error.df$df)
unique(error.df$dic)
unique(error.df$DIC
)
error.df <- error.df[error.df$DIC==1 & error.df$df=="strat.df",]
error.df
vec <- vector()
#nincl <- datasets$datanum[datasets$cor>0 & datasets$tau.emax==0] # correlatino datasets
#nincl <- datasets$datanum[datasets$cor==0 & datasets$tau.emax>0] # heterogeneity datasets
nincl <- datasets$datanum[datasets$cor==0 & datasets$tau.emax==0] # no cor/het datasets
params <- c("d.ET50.2", "d.ET50.3", "d.Emax.2", "d.Emax.3",
"est.1.2", "est.1.3", "est.2.2", "est.2.3", "est.3.2", "est.3.3")
error.df <- perform.df[perform.df$datanum %in% nincl,]
error.df <- error.df[error.df$DIC==1 & error.df$df=="strat.df",]
error.df <- error.df[grepl("p\\.error\\.", error.df$measure),]
error.df <- error.df[error.df$param %in% params,]
error.df
error.df$datanum
vec <- error.df$value
vec
vec <- unlist(error.df$value)
vec
sort(vec)
hist(vec)
plot(vec)
vec <- vector()
#nincl <- datasets$datanum[datasets$cor>0 & datasets$tau.emax==0] # correlatino datasets
#nincl <- datasets$datanum[datasets$cor==0 & datasets$tau.emax>0] # heterogeneity datasets
nincl <- datasets$datanum[datasets$cor==0 & datasets$tau.emax==0] # no cor/het datasets
params <- c("d.ET50.2", "d.ET50.3", "d.Emax.2", "d.Emax.3",
"est.1.2", "est.1.3", "est.2.2", "est.2.3", "est.3.2", "est.3.3")
#error.df <- perform.df[perform.df$datanum %in% nincl,]
error.df <- error.df[error.df$DIC==1 & error.df$df=="strat.df",]
error.df <- error.df[grepl("p\\.error\\.", error.df$measure),]
error.df <- error.df[error.df$param %in% params,]
vec <- unlist(error.df$value)
vec
sort(vec)
plot(vec)
error.df <- perform.df
#error.df <- error.df[error.df$datanum %in% nincl,]
error.df <- error.df[error.df$DIC==1 & error.df$df=="strat.df",]
error.df <- error.df[grepl("p\\.error\\.", error.df$measure),]
error.df <- error.df[error.df$param %in% params,]
vec <- unlist(error.df$value)
vec
sort(vec)
plot(vec)
nincl <- datasets$datanum[datasets$comprem==0,] # complete datasets
params <- c("d.ET50.2", "d.ET50.3", "d.Emax.2", "d.Emax.3",
"est.1.2", "est.1.3", "est.2.2", "est.2.3", "est.3.2", "est.3.3")
error.df <- perform.df
error.df <- error.df[error.df$datanum %in% nincl,]
error.df <- error.df[error.df$DIC==1 & error.df$df=="strat.df",]
error.df <- error.df[grepl("p\\.error\\.", error.df$measure),]
error.df <- error.df[error.df$param %in% params,]
vec <- unlist(error.df$value)
nincl <- datasets$datanum[datasets$comprem==0] # complete datasets
params <- c("d.ET50.2", "d.ET50.3", "d.Emax.2", "d.Emax.3",
"est.1.2", "est.1.3", "est.2.2", "est.2.3", "est.3.2", "est.3.3")
error.df <- perform.df
error.df <- error.df[error.df$datanum %in% nincl,]
error.df <- error.df[error.df$DIC==1 & error.df$df=="strat.df",]
error.df <- error.df[grepl("p\\.error\\.", error.df$measure),]
error.df <- error.df[error.df$param %in% params,]
vec <- unlist(error.df$value)
sort(vec)
plot(vec)
vec <- vector()
#nincl <- datasets$datanum[datasets$cor>0 & datasets$tau.emax==0] # correlatino datasets
#nincl <- datasets$datanum[datasets$cor==0 & datasets$tau.emax>0] # heterogeneity datasets
#nincl <- datasets$datanum[datasets$cor==0 & datasets$tau.emax==0] # no cor/het datasets
nincl <- datasets$datanum[datasets$comprem==0 & datasets$cor==0 & datasets$tau.emax==0] # complete datasets with no cor/het
params <- c("d.ET50.2", "d.ET50.3", "d.Emax.2", "d.Emax.3",
"est.1.2", "est.1.3", "est.2.2", "est.2.3", "est.3.2", "est.3.3")
error.df <- perform.df
error.df <- error.df[error.df$datanum %in% nincl,]
error.df <- error.df[error.df$DIC==1 & error.df$df=="strat.df",]
error.df <- error.df[grepl("p\\.error\\.", error.df$measure),]
error.df <- error.df[error.df$param %in% params,]
vec <- unlist(error.df$value)
plot(vec)
pred <- predict(linear.run, E0.data = 0.5)
linear.run <- MBNMA.run(network, fun="linear")
pred <- predict(linear.run, E0.data = 0.5)
rank.MBNMA.predict(pred)
ranks <- rank.MBNMA.predict(pred)
ranks <- rank.MBNMA.predict(pred)
ranks$Predictions$summary
rank <- rank.MBNMA.predict(pred)
expect_equal(names(rank$Predictions), c("summary", "prob.matrix", "rank.matrix"))
expect_equal(names(rank), "Predictions")
expect_equal(names(rank$Predictions), c("summary", "prob.matrix", "rank.matrix"))
expect_equal(class(rank$Predictions$summary), "data.frame")
expect_equal(class(rank$Predictions$rank.matrix), "matrix")
expect_equal(class(rank$Predictions$prob.matrix), "matrix")
pred <- predict(emax, E0.data = "rbeta(nsims, shape1=1, shape2=5)",
exact.doses=list("eletriptan"=c(0,1,2,3), "rizatriptan"=c(0.5,1,2)))
rank <- rank.MBNMA.predict(pred)
rank$Predictions$summary
expect_equal(nrow(rank$Predictions$summary), length(unlist(doses)))
length(unlist(doses))
doses <- list("eletriptan"=c(0,1,2,3), "rizatriptan"=c(0.5,1,2))
expect_equal(nrow(rank$Predictions$summary), length(unlist(doses)))
rank.up <- rank.MBNMA.predict(pred, direction=-1)
rank.down <- rank.MBNMA.predict(pred, direction=1)
rank.up
rank.up$Predictions$summary
rank.down$Predictions$summary
expect_equal(rank.down$Predictions$summary[rank.down$Predictions$summary$`50%`==min(rank.down$Predictions$summary$`50%`),],
rank.up$Predictions$summary[rank.up$Predictions$summary$`50%`==max(rank.up$Predictions$summary$`50%`),]
)
rank.down$Predictions$summary[rank.down$Predictions$summary$`50%`==min(rank.down$Predictions$summary$`50%`),]
expect_equal(rank.down$Predictions$summary$rank.param[rank.down$Predictions$summary$`50%`==min(rank.down$Predictions$summary$`50%`)],
rank.up$Predictions$summary$rank.param[rank.up$Predictions$summary$`50%`==max(rank.up$Predictions$summary$`50%`)]
)
doses <- list("eletriptan"=c(0,1,2,3), "rizatriptan"=c(0.5,1,2))
pred <- predict(emax, E0.data = "rbeta(nsims, shape1=1, shape2=5)",
exact.doses=doses)
rank <- rank.MBNMA.predict(pred, rank.doses = list("eletriptan"=2, "rizatriptan"=2))
rank$Predictions$summary
expect_equal(nrow(rank$Predictions$summary), 2)
rank.MBNMA.predict(pred, rank.doses = list("badger"=2, "rizatriptan"=2))
rank.MBNMA.predict(pred, rank.doses = list("eletriptan"=4, "rizatriptan"=2))
devtools::load_all(".")
rank.MBNMA.predict(pred, rank.doses = list("badger"=2, "rizatriptan"=2))
devtools::load_all(".")
rank.MBNMA.predict(pred, rank.doses = list("badger"=2, "rizatriptan"=2))
devtools::load_all(".")
rank.MBNMA.predict(pred, rank.doses = list("badger"=2, "rizatriptan"=2))
devtools::load_all(".")
rank.MBNMA.predict(pred, rank.doses = list("badger"=2, "rizatriptan"=2))
devtools::load_all(".")
rank.MBNMA.predict(pred, rank.doses = list("badger"=2, "rizatriptan"=2))
expect_error(rank.MBNMA.predict(pred, rank.doses = list("badger"=2, "rizatriptan"=2)), "badger")
expect_error(rank.MBNMA.predict(pred, rank.doses = list("badger"=2, "rizatriptan"=2)), "baddger")
expect_error(rank.MBNMA.predict(pred, rank.doses = list("badger"=2, "rizatriptan"=2)), "badger")
rank.MBNMA.predict(pred, rank.doses = list("eletriptan"=100, "rizatriptan"=2))
devtools::load_all(".")
rank.MBNMA.predict(pred, rank.doses = list("eletriptan"=100, "rizatriptan"=2))
devtools::load_all(".")
rank.MBNMA.predict(pred, rank.doses = list("eletriptan"=100, "rizatriptan"=2))
expect_error(rank.MBNMA.predict(pred, rank.doses = list("eletriptan"=100, "rizatriptan"=2)), "the following doses")
rank.MBNMA.predict(pred, rank.doses = list("eletriptan"=c(2, 50, 100), "rizatriptan"=2))
expect_error(rank.MBNMA.predict(pred, rank.doses = list("eletriptan"=c(2, 50, 100), "rizatriptan"=2)), "will not be included in ranking: 50\\, 100")
devtools::load_all(".")
expect_error(rank.MBNMA.predict(pred, rank.doses = list("eletriptan"=c(2, 50, 100), "rizatriptan"=2)), "cannot be included in ranking: 50\\, 100")
testthat::test_that("rank.MBNMA.predict functions correctly", {
pred <- predict(linear.run, E0.data = 0.5)
rank <- rank.MBNMA.predict(pred)
expect_equal(names(rank), "Predictions")
expect_equal(names(rank$Predictions), c("summary", "prob.matrix", "rank.matrix"))
expect_equal(class(rank$Predictions$summary), "data.frame")
expect_equal(class(rank$Predictions$rank.matrix), "matrix")
expect_equal(class(rank$Predictions$prob.matrix), "matrix")
doses <- list("eletriptan"=c(0,1,2,3), "rizatriptan"=c(0.5,1,2))
pred <- predict(emax, E0.data = "rbeta(nsims, shape1=1, shape2=5)",
exact.doses=doses)
rank <- rank.MBNMA.predict(pred)
expect_equal(names(rank), "Predictions")
expect_equal(names(rank$Predictions), c("summary", "prob.matrix", "rank.matrix"))
expect_equal(class(rank$Predictions$summary), "data.frame")
expect_equal(class(rank$Predictions$rank.matrix), "matrix")
expect_equal(class(rank$Predictions$prob.matrix), "matrix")
expect_equal(nrow(rank$Predictions$summary), length(unlist(doses)))
# Test direction
rank.up <- rank.MBNMA.predict(pred, direction=-1)
rank.down <- rank.MBNMA.predict(pred, direction=1)
expect_equal(rank.down$Predictions$summary$rank.param[rank.down$Predictions$summary$`50%`==min(rank.down$Predictions$summary$`50%`)],
rank.up$Predictions$summary$rank.param[rank.up$Predictions$summary$`50%`==max(rank.up$Predictions$summary$`50%`)]
)
# Test rank.doses
doses <- list("eletriptan"=c(0,1,2,3), "rizatriptan"=c(0.5,1,2))
pred <- predict(emax, E0.data = "rbeta(nsims, shape1=1, shape2=5)",
exact.doses=doses)
rank <- rank.MBNMA.predict(pred, rank.doses = list("eletriptan"=2, "rizatriptan"=2))
expect_equal(nrow(rank$Predictions$summary), 2)
expect_error(rank.MBNMA.predict(pred, rank.doses = list("badger"=2, "rizatriptan"=2)), "badger")
expect_error(rank.MBNMA.predict(pred, rank.doses = list("eletriptan"=c(2, 50, 100), "rizatriptan"=2)), "cannot be included in ranking: 50\\, 100")
})
plot(rank)
write <- MBNMA.write(fun="linear", beta.1="rel", method="common",
likelihood="binomial", link="logit")
cat(write)
expect_equal(grepl("s\\.beta\\.1", write), TRUE)
expect_equal(grepl("s\\.beta\\.2", write), FALSE)
expect_equal(grepl("sd ", write), FALSE)
expect_equal(grepl("N\\[i,k\\]", write), TRUE)
expect_equal(grepl("r\\[i,k\\]", write), TRUE)
expect_equal(grepl("logit", write), TRUE)
write <- MBNMA.write(fun="emax", beta.1="rel", beta.2="rel", method="random",
likelihood="normal", link="identity")
expect_equal(grepl("s\\.beta\\.1", write), TRUE)
expect_equal(grepl("s\\.beta\\.2", write), TRUE)
expect_equal(grepl("sd ", write), TRUE)
expect_equal(grepl("y\\[i,k\\]", write), TRUE)
expect_equal(grepl("se\\[i,k\\]", write), TRUE)
expect_equal(grepl("logit", write), FALSE)
write
cat(write)
write <- MBNMA.write(fun="emax.hill", beta.1="rel", beta.2="rel", beta.3="random",
method="random",
likelihood="poisson", link="cloglog")
cat(write)
write <- MBNMA.write(fun="emax.hill", beta.1="rel", beta.2="rel", beta.3="random",
method="random",
likelihood="poisson", link="cloglog")
expect_equal(grepl("s\\.beta\\.1", write), TRUE)
expect_equal(grepl("s\\.beta\\.2", write), TRUE)
expect_equal(grepl("beta\\.3,", write), TRUE)
expect_equal(grepl("\nd\\.3,", write), FALSE)
expect_equal(grepl("sd ", write), TRUE)
expect_equal(grepl("sd\\.3", write), TRUE)
expect_equal(grepl("sd\\.1", write), FALSE)
expect_equal(grepl("Omega", write), TRUE)
expect_equal(grepl("r\\[i,k\\]", write), TRUE)
expect_equal(grepl("E\\[i,k\\]", write), TRUE)
expect_equal(grepl("cloglog", write), TRUE)
write <- MBNMA.write(fun="emax.hill", beta.1="rel", beta.2="rel", beta.3="random",
method="random",
likelihood="poisson", link="cloglog")
expect_equal(grepl("s\\.beta\\.1", write), TRUE)
expect_equal(grepl("s\\.beta\\.2", write), TRUE)
expect_equal(grepl("beta\\.3,", write), TRUE)
expect_equal(grepl("\nd\\.3,", write), FALSE)
expect_equal(grepl("sd ", write), TRUE)
expect_equal(grepl("sd\\.3", write), TRUE)
expect_equal(grepl("sd\\.1", write), FALSE)
expect_equal(grepl("Omega", write), TRUE)
expect_equal(grepl("r\\[i,k\\]", write), TRUE)
expect_equal(grepl("E\\[i,k\\]", write), TRUE)
expect_equal(grepl("cloglog", write), TRUE)
devtools::load_all(".")
write <- MBNMA.write(fun="emax.hill", beta.1="rel", beta.2="rel", beta.3="random",
method="random",
likelihood="poisson", link="cloglog")
expect_equal(grepl("s\\.beta\\.1", write), TRUE)
expect_equal(grepl("s\\.beta\\.2", write), TRUE)
expect_equal(grepl("beta\\.3,", write), TRUE)
expect_equal(grepl("\nd\\.3,", write), FALSE)
expect_equal(grepl("sd ", write), TRUE)
expect_equal(grepl("sd\\.3", write), TRUE)
expect_equal(grepl("sd\\.1", write), FALSE)
expect_equal(grepl("Omega", write), TRUE)
expect_equal(grepl("r\\[i,k\\]", write), TRUE)
expect_equal(grepl("E\\[i,k\\]", write), TRUE)
expect_equal(grepl("cloglog", write), TRUE)
write <- MBNMA.write(fun="emax.hill", beta.1="rel", beta.2="rel", beta.3="random",
method="random",
likelihood="poisson", link="cloglog",
var.scale=c(10,1))
cat(write)
expect_equal(grepl("Omega\\[1,1\\] <- 10", write), TRUE)
expect_equal(grepl("Omega\\[2,2\\] <- 1", write), TRUE)
write <- MBNMA.write(fun="emax.hill", beta.1="rel", beta.2="rel", beta.3="random",
method="random",
likelihood="poisson", link="cloglog",
var.scale=100)
write <- MBNMA.write(fun="linear", beta.1="rel", method="common",
likelihood="binomial", link="logit",
class.effect=list(beta.1="random"))
expect_equal(grepl("D\\.1", write), TRUE)
expect_equal(grepl("sd\\.D\\.1", write), TRUE)
write <- MBNMA.write(fun="linear", beta.1="rel", method="common",
likelihood="binomial", link="logit",
class.effect=list(beta.2="random"))
write <- MBNMA.write(fun="linear", beta.1="rel", method="common",
likelihood="binomial", link="logit",
class.effect=list(beta.1="fixed"))
expect_equal(grepl("D\\.1", write), TRUE)
expect_equal(grepl("sd\\.D\\.1", write), FALSE)
write <- MBNMA.write(fun="linear", beta.1="rel", method="common",
likelihood="binomial", link="logit",
class.effect=list(beta.1="common"))
expect_equal(grepl("D\\.1", write), TRUE)
expect_equal(grepl("sd\\.D\\.1", write), FALSE)
testthat::test_that("MBNMA.write functions correctly", {
write <- MBNMA.write(fun="linear", beta.1="rel", method="common",
likelihood="binomial", link="logit")
expect_equal(grepl("s\\.beta\\.1", write), TRUE)
expect_equal(grepl("s\\.beta\\.2", write), FALSE)
expect_equal(grepl("sd ", write), FALSE)
expect_equal(grepl("N\\[i,k\\]", write), TRUE)
expect_equal(grepl("r\\[i,k\\]", write), TRUE)
expect_equal(grepl("logit", write), TRUE)
write <- MBNMA.write(fun="emax", beta.1="rel", beta.2="rel", method="random",
likelihood="normal", link="identity")
expect_equal(grepl("s\\.beta\\.1", write), TRUE)
expect_equal(grepl("s\\.beta\\.2", write), TRUE)
expect_equal(grepl("sd ", write), TRUE)
expect_equal(grepl("y\\[i,k\\]", write), TRUE)
expect_equal(grepl("se\\[i,k\\]", write), TRUE)
expect_equal(grepl("logit", write), FALSE)
write <- MBNMA.write(fun="emax", beta.1="rel", beta.2="rel", method="random",
likelihood="normal", link="identity")
expect_equal(grepl("s\\.beta\\.1", write), TRUE)
expect_equal(grepl("s\\.beta\\.2", write), TRUE)
expect_equal(grepl("sd ", write), TRUE)
expect_equal(grepl("Omega", write), TRUE)
expect_equal(grepl("y\\[i,k\\]", write), TRUE)
expect_equal(grepl("se\\[i,k\\]", write), TRUE)
expect_equal(grepl("logit", write), FALSE)
write <- MBNMA.write(fun="emax.hill", beta.1="rel", beta.2="rel", beta.3="random",
method="random",
likelihood="poisson", link="cloglog")
expect_equal(grepl("s\\.beta\\.1", write), TRUE)
expect_equal(grepl("s\\.beta\\.2", write), TRUE)
expect_equal(grepl("beta\\.3,", write), TRUE)
expect_equal(grepl("\nd\\.3,", write), FALSE)
expect_equal(grepl("sd ", write), TRUE)
expect_equal(grepl("sd\\.3", write), TRUE)
expect_equal(grepl("sd\\.1", write), FALSE)
expect_equal(grepl("Omega", write), TRUE)
expect_equal(grepl("r\\[i,k\\]", write), TRUE)
expect_equal(grepl("E\\[i,k\\]", write), TRUE)
expect_equal(grepl("cloglog", write), TRUE)
write <- MBNMA.write(fun="emax.hill", beta.1="rel", beta.2="rel", beta.3="random",
method="random",
likelihood="poisson", link="cloglog",
var.scale=c(10,1))
expect_equal(grepl("Omega\\[1,1\\] <- 10", write), TRUE)
expect_equal(grepl("Omega\\[2,2\\] <- 1", write), TRUE)
expect_error(MBNMA.write(fun="emax.hill", beta.1="rel", beta.2="rel", beta.3="random",
method="random",
likelihood="poisson", link="cloglog",
var.scale=100))
write <- MBNMA.write(fun="linear", beta.1="rel", method="common",
likelihood="binomial", link="logit",
class.effect=list(beta.1="random"))
expect_equal(grepl("D\\.1", write), TRUE)
expect_equal(grepl("sd\\.D\\.1", write), TRUE)
expect_error(MBNMA.write(fun="linear", beta.1="rel", method="common",
likelihood="binomial", link="logit",
class.effect=list(beta.2="random")))
write <- MBNMA.write(fun="linear", beta.1="rel", method="common",
likelihood="binomial", link="logit",
class.effect=list(beta.1="common"))
expect_equal(grepl("D\\.1", write), TRUE)
expect_equal(grepl("sd\\.D\\.1", write), FALSE)
})
network <- MBNMA.network(HF2PPITT)
# Generate data without placebo
noplac.df <- network$data.ab[network$data.ab$narm>2 & network$data.ab$agent!=1,]
net.noplac <- MBNMA.network(noplac.df)
nrow(inconsistency.loops(network))
df <- network$data.ab
inconsistency.loops(df)
inconsistency.loops(net.noplac$data.ab)
plot(net.noplac)
net.noplac$data.ab
expect_equal(nrow(inconsistency.loops(net.noplac$data.ab)), 8)
network$data.ab
network$data.ab
network$data.ab[network$data.ab$studyID==39,]
rows <- network$data.ab[network$data.ab$studyID==39,]
net.1plac <- rbind(noplac.df, rows)
net.1plac <- MBNMA.network(net.1plac)
plot(net.1plac)
plot(network)
plot(net.noplac)
plot(net.1plac, doseparam = 1)
plot(net.1plac, doseparam = 2)
plot(net.1plac, doseparam = 2, remove.loops = TRUE)
devtools::load_all(".")
plot(net.1plac, doseparam = 2, remove.loops = TRUE)
devtools::load_all(".")
plot(net.1plac, doseparam = 2, remove.loops = TRUE)
plot(net.1plac, remove.loops = TRUE)
inconsistency.loops(net.1plac$data.ab)
net.1plac
expect_equal(nrow(inconsistency.loops(network$data.ab)), 4)
expect_equal(nrow(inconsistency.loops(net.noplac$data.ab)), 8) # more loops since ref treatment has changed
incon <- inconsistency.loops(network$data.ab)
incon
expect_identical(names(incon), c("t1", "t2", "path"))
split <- MBNMA.nodesplit(network, likelihood = "binomial", link="logit",
method="random")
split
length(split)
expect_equal(nrow(inconsistency.loops(network$data.ab)), length(split)+1)
expect_equal(nrow(inconsistency.loops(network$data.ab)), length(split)-1)
summary(split)
plot(split)
class(split)
expect_equal(class(split), "mtc.nodesplit")
expect_equal("mtc.nodesplit" %in% class(split), TRUE)
split <- MBNMA.nodesplit(net.noplac, likelihood = "binomial", link="logit",
method="common")
inconsistency.loops(net.noplac$data.ab)
split <- MBNMA.nodesplit(net.noplac, likelihood = "binomial", link="logit",
method="common", drop.discon = TRUE)
split <- MBNMA.nodesplit(net.noplac, likelihood = "binomial", link="logit",
method="common", drop.discon = FALSE)
plot(net.noplac, doseparam = 5)
plot(net.noplac, doseparam = 2)
noplac.df <- network$data.ab[network$data.ab$narm>2 & network$data.ab$agent!=1,]
net.noplac <- MBNMA.network(noplac.df)
plot(net.noplac)
plot(net.noplac)
dev.off()
plot(net.noplac)
plot(net.noplac, doseparam = 5)
plot(network)
dev.on()
plot(network)
