}
}
params
rank.MBNMA(mbnma)
devtools::load_all(".")
rank.MBNMA(mbnma)
devtools::load_all(".")
rank.MBNMA(mbnma)
cat(re.4$model.arg$jagscode)
devtools::load_all(".")
MBNMA.linear(network)
!all((names(arg.params)) %in% c("wrap.params", "run.params"))
wrap.params <- arg.params$wrap.params
run.params <- arg.params$run.params
arg.params <- list(
wrap.params=c("slope"),
run.params=c("beta.1")
)
class.effect <- list("slope"="common")
fun.params <- names(class.effect)
fun.params
for (k in seq_along(fun.params)) {
for (m in seq_along(wrap.params)) {
if (wrap.params[m] %in% fun.params[k]) {
fun.params[k] <- run.params[m]
}
}
}
wrap.params <- arg.params$wrap.params
run.params <- arg.params$run.params
fun.params <- names(class.effect)
for (k in seq_along(fun.params)) {
for (m in seq_along(wrap.params)) {
if (wrap.params[m] %in% fun.params[k]) {
fun.params[k] <- run.params[m]
}
}
}
fun.params
wrap.params
wrap.params2 <- c("emax", "et50")
run.params2 <- c("beta.1", "beta.2")
fun.params <- c("et50")
which[fun.params[k]==wrap.params]
which[fun.params==wrap.params]
which[fun.params[1]==wrap.params[2]]
fun.params
?which
which(fun.params[1]==wrap.params[2])
which(fun.params==wrap.params)
fun.params
wrap.params
which(fun.params==wrap.params2)
run.params2[which(fun.params==wrap.params2)]
fun.params
fun.params <- c("et50", "emax")
run.params2[which(fun.params==wrap.params2)]
run.params2[which(fun.params %in% wrap.params2)]
which(fun.params %in% wrap.params2)
fun.params
wrap.params2
for (k in seq_along(fun.params)) {
fun.params[k] <- run.params2[which(fun.params %in% wrap.params2)]
}
fun.params
fun.params <- c("et50", "emax")
for (k in seq_along(fun.params)) {
fun.params[k] <- run.params2[which(fun.params[k] %in% wrap.params2)]
}
fun.params
wrap.params2
run.params2
fun.params <- c("et50", "emax")
for (k in seq_along(fun.params)) {
fun.params[k] <- run.params2[which(fun.params[k]==wrap.params2)]
}
fun.params
arg.params <- list(
wrap.params=c("emax", "ed50"),
run.params=c("beta.1", "beta.2")
)
fun="emax"
user.fun <- NULL
model.file=NULL
beta.1="rel"
beta.2 <- "rel"
beta.3 <- NULL
method="random"
class.effect <- list()
var.scale <- NULL
pd="pv"
parallel=TRUE
likelihood <- "binomial"
link <- "logit"
priors <- NULL
model <- MBNMA.write(fun=fun, user.fun=user.fun,
beta.1=beta.1, beta.2=beta.2, beta.3=beta.3,
method=method,
class.effect=class.effect,
var.scale=var.scale,
likelihood=likelihood, link=link
)
devtools::load_all(".")
model <- MBNMA.write(fun=fun, user.fun=user.fun,
beta.1=beta.1, beta.2=beta.2, beta.3=beta.3,
method=method,
class.effect=class.effect,
var.scale=var.scale,
likelihood=likelihood, link=link
)
model <- MBNMA.write(fun=fun, user.fun=user.fun,
beta.1=beta.1, beta.2="random", beta.3=beta.3,
method=method,
class.effect=class.effect,
var.scale=var.scale,
likelihood=likelihood, link=link
)
cat(model)
code.params
code.params <- c("d", "beta", "sd", "tau", "D", "sd.D", "s.beta")
for (i in seq_along(wrap.params)) {
for (k in seq_along(code.params)) {
model <- gsub(paste(code.params[k], strsplit(run.params[i], split="[.]")[[1]][2], sep="."),
paste(code.params[k], wrap.params[i], sep="."), model)
}
}
cat(model)
strsplit(run.params[i], split="[.]")[[1]][2], sep=".")
strsplit(run.params[i], split="[.]")[[1]][2])
strsplit(run.params[i], split="[.]")[[1]][2]
strsplit(run.params[1], split="[.]")[[1]][2]
strsplit(run.params[2], split="[.]")[[1]][2]
wrap.params
wrap.params <- arg.params$wrap.params
run.params <- arg.params$run.params
model <- MBNMA.write(fun=fun, user.fun=user.fun,
beta.1=beta.1, beta.2=beta.2, beta.3=beta.3,
method=method,
class.effect=class.effect,
var.scale=var.scale,
likelihood=likelihood, link=link
)
code.params <- c("d", "beta", "sd", "tau", "D", "sd.D", "s.beta")
for (i in seq_along(wrap.params)) {
for (k in seq_along(code.params)) {
model <- gsub(paste(code.params[k], strsplit(run.params[i], split="[.]")[[1]][2], sep="."),
paste(code.params[k], wrap.params[i], sep="."), model)
}
}
model <- MBNMA.write(fun=fun, user.fun=user.fun,
beta.1=beta.1, beta.2=beta.2, beta.3=beta.3,
method=method,
class.effect=class.effect,
var.scale=var.scale,
likelihood=likelihood, link=link
)
code.params <- c("d", "beta", "sd", "tau", "D", "sd.D")
for (i in seq_along(wrap.params)) {
for (k in seq_along(code.params)) {
model <- gsub(paste(code.params[k], strsplit(run.params[i], split="[.]")[[1]][2], sep="."),
paste(code.params[k], wrap.params[i], sep="."), model)
}
}
cat(model)
model <- MBNMA.write(fun=fun, user.fun=user.fun,
beta.1=beta.1, beta.2="random", beta.3=beta.3,
method=method,
class.effect=class.effect,
var.scale=var.scale,
likelihood=likelihood, link=link
)
code.params <- c("d", "beta", "sd", "tau", "D", "sd.D")
for (i in seq_along(wrap.params)) {
for (k in seq_along(code.params)) {
model <- gsub(paste(code.params[k], strsplit(run.params[i], split="[.]")[[1]][2], sep="."),
paste(code.params[k], wrap.params[i], sep="."), model)
}
}
cat(model)
wrap.params
which(sapply(list(beta.1, beta.2, beta.3),
is.character))
beta.3
run.params[which(sapply(list(beta.1, beta.2, beta.3),
is.character))]
wrap.params[which(sapply(list(beta.1, beta.2, beta.3),
is.character))]
wrap.params <- wrap.params[which(sapply(list(beta.1, beta.2, beta.3),
is.character))]
gen.parameters.to.save(model.params=wrap.params, model=model)
devtools::load_all(".")
MBNMA.linear(network)
devtools::load_all(".")
MBNMA.linear(network)
MBNMA.emax(network)
MBNMA.emax(network, method="random")
write.dose.fun
devtools::load_all(".")
MBNMA.emax.hill(network, method="random")
devtools::load_all(".")
MBNMA.emax.hill(network, method="random")
hil="common"
devtools::load_all(".")
MBNMA.emax.hill(network, method="random")
devtools::load_all(".")
MBNMA.emax.hill(network, method="random")
devtools::load_all(".")
model <- write.NMA(monotonic="up")
te.prior <- "
for (k in 2:NT){ # Priors on relative treatment effects
d[k] ~ dnorm(0,0.0001)
}
"
trunc <- "T(d[k-1],)"
gsub("(d\\[k\\] ~ dnorm\\()(0)(,0.0001\\)(\n)",
paste0("\\1d[k-1]\\3 ", trunc, " \\4"),
te.prior)
gsub("(d\\[k\\] ~ dnorm\\()",
paste0("\\1d[k-1] ", trunc),
te.prior)
gsub("(^d\\[k\\] ~ dnorm\\()",
paste0("\\1d[k-1] ", trunc),
te.prior)
gsub("(.+^d\\[k\\] ~ dnorm\\()(0)(,0.0001\\)(\n.+)",
paste0("\\1d[k-1]", trunc),
te.prior)
gsub("(.+^d\\[k\\] ~ dnorm\\()(0)(.+)",
paste0("\\1d[k-1]", trunc),
te.prior)
gsub("(.+\nd\\[k\\] ~ dnorm\\()(0)(.+)",
paste0("\\1d[k-1]", trunc),
te.prior)
gsub("(.+\nd\\[k\\] ~ dnorm\\()(0)(,0.0001\\)(\n.+)",
paste0("\\1d[k-1]", trunc),
te.prior)
gsub("(.+\nd\\[k\\] ~ dnorm\\()(0)(.+)",
paste0("\\1d[k-1]", trunc),
te.prior)
gsub("(.+\nd\\[k\\] ~ dnorm\\()(0)(,0.0001\\)\n.+)",
paste0("\\1d[k-1]", trunc),
te.prior)
devtools::load_all(".")
model <- write.NMA(monotonic="up")
cat(model)
devtools::load_all(".")
model <- write.NMA(monotonic="up")
cat(model)
devtools::load_all(".")
model <- write.NMA(monotonic="up")
cat(model)
devtools::load_all(".")
NMA.run(network, monotonic = "up")
?dbern
?rbern
?rbernoulli
?dbernoulli
rbernoulli(1, p=1)
purrr::rbernoulli(1, p=1)
purrr::rbernoulli(1, p=1)
purrr::rbernoulli(10, p=0.5)
purrr::rbernoulli(10, p=1)
purrr::rbernoulli(10, p=0.9)
devtools::load_all(".")
inserts <- write.inserts()
vars <- write.beta.vars()
vars
devtools::load_all(".")
model <- MBNMA.write(fun="nonparam.up")
devtools::load_all(".")
model <- MBNMA.write(fun="nonparam.up")
devtools::load_all(".")
model <- MBNMA.write(fun="nonparam.up")
model <- MBNMA.write(fun="nonparam.up", likelihood="binomial", link="logit")
cat(model)
data.ab <- network[["data.ab"]]
data.ab
data.ab <- data.ab %>%
dplyr::group_by(agent) %>%
dplyr::sort_by(dose) %>%
dplyr::mutate(dose = sequence(n()))
?sort
data.ab %>%
dplyr::group_by(agent) %>%
sort_by(dose) %>%
dplyr::mutate(dose = sequence(n()))
data.ab %>%
dplyr::group_by(agent) %>%
sort(dose) %>%
dplyr::mutate(dose = sequence(n()))
data.ab %>%
dplyr::group_by(agent) %>%
dplyr::mutate(temp = sequence(n()))
data.ab %>%
dplyr::group_by(agent) %>%
unique(dose)
data.ab %>%
dplyr::group_by(agent) %>%
summarize(dose)
?summarize
data.ab %>%
dplyr::group_by(agent) %>%
dplyr::summarize(dose)
?mutate
data.ab %>%
dplyr::group_by(agent) %>%
dplyr::mutate(temp = sequence(n(unique(dose))))
data.ab %>%
dplyr::group_by(agent) %>%
dplyr::mutate(temp = sequence(unique(dose)))
data.ab %>%
dplyr::group_by(agent) %>%
dplyr::mutate(temp = unique(dose))
devtools::load_all(".")
index.dose(data.ab)
temp <- index.dose(data.ab)
temp$dose[temp$agent==1]
temp$dose[temp$agent==2]
temp$dose[temp$agent==3]
temp$dose[temp$agent==4]
temp$dose[temp$agent==5]
temp$dose[temp$agent==6]
jagsdata <- getjagsdata(data.ab, class=FALSE,
likelihood=binomial, link=logit) # get data into jags correct format
jagsdata <- getjagsdata(data.ab, class=FALSE,
likelihood="binomial", link="logit") # get data into jags correct format
jagsdata
jagsdata$dose
data.ab <- index.dose(network[["data.ab"]])
jagsdata$dose
jagsdata
jagsdata <- getjagsdata(data.ab, class=FALSE,
likelihood="binomial", link="logit") # get data into jags correct format
jagsata$dose
jagsdata$dose
MBNMA.run(fun="nonparam.up")
MBNMA.run(network, fun="nonparam.up")
devtools::load_all(".")
devtools::load_all(".")
MBNMA.run(network, fun="nonparam.up")
devtools::load_all(".")
MBNMA.run(network, fun="nonparam.up")
index.dose(network[["data.ab"]])
devtools::load_all(".")
MBNMA.run(network, fun="nonparam.up")
test <- MBNMA.run(network, fun="nonparam.up")
cat(test$model.arg$jagscode)
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.up")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.up")
plot(network)
network <- MBNMA.network(HF2PPITT)
test <- MBNMA.run(network, fun="nonparam.up")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.up")
network$agents
network$data.ab$dose[network$data.ab$agent==8]
temp <- index.dose(network$data.ab)
temp
temp$data.ab$dose[temp$data.ab$agent==8]
devtools::load_all(".")
temp <- index.dose(network$data.ab)
temp$maxdose
test <- MBNMA.run(network, fun="nonparam.up")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.up")
test$model.arg$jagscode
cat(test$model.arg$jagscode)
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.up")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.up")
cat(test$model.arg$jagscode)
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.up")
cat(test$model.arg$jagscode)
test <- MBNMA.run(network, fun="nonparam.down")
cat(test$model.arg$jagscode)
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.down")
test
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = "d.1")
test
network$treatments
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = "d.1")
test
network$treatments
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.up", parameters.to.save = "d.1")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = "d.1")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = "d.1")
test <- MBNMA.run(network, fun="nonparam.up", parameters.to.save = "d.1")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.up", parameters.to.save = "d.1")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = "d.1")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = "d.1")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = "d.1")
test <- MBNMA.run(network, fun="nonparam.up", parameters.to.save = "d.1")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.up", parameters.to.save = "d.1")
test
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.up", parameters.to.save = "d.1")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = "d.1")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = "d.1")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = "d.1")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = "d.1")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = "d.1")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = "d.1")
test <- MBNMA.run(network, fun="nonparam.up", parameters.to.save = "d.1")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = "d.1")
test
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = c("d.1", "totresdev"))
test
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = c("d.1", "totresdev"), method="random")
test
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = c("d.1", "totresdev", "sd"), method="random")
test
re.4
matplot(test$BUGSoutput$median)
matplot(test$BUGSoutput$median$d.1)
matplot(test$BUGSoutput$median$d.1[,2])
matplot(test$BUGSoutput$median$d.1[2,])
test$BUGSoutput$median$d.1
test
as.vector(test$BUGSoutput$median$d.1)
matplot(as.vector(test$BUGSoutput$median$d.1)[2:4])
matplot(as.vector(test$BUGSoutput$median$d.1)[5:8])
matplot(as.vector(test$BUGSoutput$median$d.1)[37:40])
test$BUGSoutput$sims.list$d.1
nrow(test$BUGSoutput$sims.list$d.1)
ncol(test$BUGSoutput$sims.list$d.1)
ndim(test$BUGSoutput$sims.list$d.1)
dim(test$BUGSoutput$sims.list$d.1)
maxdose
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
test
matplot(as.vector(test$BUGSoutput$median$d.1)[37:40])
x <-
x <- as.vector(test$BUGSoutput$median$d.1)[37:40]
matplot(exp(x)/(exp(x)+1))
fitplot(test)
NMA.run(network)
cat(test$model.arg$jagscode)
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
test
test <- MBNMA.run(network, fun="linear", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
test
devtools::load_all(".")
test <- MBNMA.run(network, fun="linear", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
test
devtools::load_all(".")
test <- MBNMA.run(network, fun="emax", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
test
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
test
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
test
test <- MBNMA.run(network, fun="nonparam.up", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.up", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
test
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
test
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
test
test <- MBNMA.run(network, fun="nonparam.up", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.up", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
test
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.up", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
test
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
test
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.down", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
test
test <- MBNMA.run(network, fun="nonparam.up", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
test
fitplot(test)
nma <- NMA.run(network, method="random")
nma
plot(test)
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.up", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
test <- MBNMA.run(network, fun="nonparam.up", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.up", parameters.to.save = c("d.1", "totresdev", "sd", "maxdose"), method="random")
devtools::load_all(".")
test <- MBNMA.run(network, fun="nonparam.up", method="random")
test
install.packages("R2WinBUGS")
install.packages("R2WinBUGS")
