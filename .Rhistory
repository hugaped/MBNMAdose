emax
emax$BUGSoutput$root.short
devtools::load_all(".")
ranks <- rank(emax, level="class", direction=-1)
devtools::load_all(".")
ranks <- rank(emax, level="class", direction=-1)
devtools::load_all(".")
ranks <- rank(emax, level="class", direction=-1)
devtools::load_all(".")
ranks <- rank(emax, level="class", direction=-1)
devtools::load_all(".")
ranks <- rank(emax, level="class", direction=-1)
ranks
summary(ranks)
netclass
class.df <- HF2PPITT
class.df$class <- ifelse(df$agent=="placebo", "placebo", "active1")
class.df$class <- ifelse(df$agent=="eletriptan", "active2", df$agent)
netclass <- MBNMA.network(class.df)
netclass
class.df <- HF2PPITT
class.df$class <- ifelse(df$agent=="placebo", "placebo", "active1")
class.df$class <- ifelse(df$agent=="eletriptan", "active2", df$class)
class.df
netclass <- MBNMA.network(class.df)
class.df <- HF2PPITT
class.df$class <- ifelse(df$agent=="placebo", "placebo", "active1")
class.df$class <- ifelse(df$agent=="eletriptan", "active2", df$class)
netclass <- MBNMA.network(class.df)
netclass
emax <- MBNMA.emax(netclass, emax="rel", ed50="rel", method="random",
class.effect=list("ed50"="common"))
ema
emax
ranks <- rank(emax, level="class", direction=-1)
ranks
summary(ranks)
network <- MBNMA.network(HF2PPITT)
plot(network)
plot(network)
plot(network, level="agent", remove.loops=TRUE)
plot(network, v.color="agent", remove.loops=TRUE)
plot(network, level="treatment", doseparam=1)
devtools::load_all(".")
plot(network, level="treatment", doseparam=1)
plot(network, level="treatment", doseparam=1, remove.loops=TRUE)
plot(network, level="treatment", doseparam=2, remove.loops=TRUE)
noplac.df <- network$data.ab[network$data.ab$narm>2 & network$data.ab$agent!=1,]
net.noplac <- MBNMA.network(noplac.df)
plot(net.nonplac)
plot(net.noplac)
plot(network, level="treatment", doseparam=2)
plot(network, level="treatment", doseparam=2, remove.loops=TRUE)
plot(network, level="treatment", doseparam=1, remove.loops=TRUE)
plot(network, v.color="agent", remove.loops=TRUE, label.distance=3)
plot(network, v.color="agent", remove.loops=TRUE, label.distance=4)
plot(emax)
plot(emax, agent.labs = c("Placebo", "2", "3", "4", "5", "6", "7", "8"))
plot(emax, agent.labs = c("2", "3", "4", "5", "6", "7", "8"))
g <- plot(network, level="treatment", doseparam=2)
class(g)
linear <- MBNMA.run(network, fun="linear")
exponential <- MBNMA.run(network, fun="exponential")
plot(exponential)
emax <- MBNMA.emax(network, emax="rel", ed50="rel", method="random")
plot(emax, params=c("d.ed50"))
plot(emax, params=c("d.emax"))
class.df <- HF2PPITT
class.df$class <- ifelse(df$agent=="placebo", "placebo", "active1")
class.df$class <- ifelse(df$agent=="eletriptan", "active2", df$class)
netclass <- MBNMA.network(class.df)
emax <- MBNMA.emax(netclass, emax="rel", ed50="rel", method="random",
class.effect=list("ed50"="common"))
plot(emax, class.labs=c("Placebo", "Other Active", "Eletriptan"))
plot(emax, class.labs=c("Other Active", "Eletriptan"))
devtools::load_all(".")
plot(emax, class.labs=c("Other Active", "Eletriptan"))
devtools::load_all(".")
plot(emax, class.labs=c("Other Active", "Eletriptan"))
devtools::load_all(".")
plot(emax, class.labs=c("Other Active", "Eletriptan"))
devtools::load_all(".")
plot(emax, class.labs=c("Other Active", "Eletriptan"))
plot(emax, class.labs=c("Placebo", "Other Active", "Eletriptan"))
plot(emax, class.labs=c("Other Active", "Eletriptan"))
library(R2WinBUGS)
library(tidyverse)
library(plotrix)
library(gemtc)
library(mcmcplots)
library(xlsx)
#install.packages("xlsx")
#install.packages("R2OpenBUGS")
####################### FUNCTIONS ####################################
# Drop studies from HTA report (from Edna)
drop.hta <- function(df, outcome) {
hta.df <- read.xlsx2("~/NICE TSU/IoL/ExcludedHTA.xlsx", sheetName = outcome)
hta.df <- unlist(hta.df)[unlist(hta.df)!=""]
hta.df <- as.character(hta.df)
matches <- match(df$prevstudyID, hta.df)
matches <- unique(matches[!is.na(matches)])
print(paste0(length(matches), " studies dropped from HTA report"))
df <- df[-matches,]
return(df)
}
# Inconsistency plot
plot.ume <- function(result=result, result.ume=result.ume,
type="resdev", lim=15, cutoff=1) {
if (type=="resdev") {
dev.df <- data.frame("nma"=result$median[[type]], "ume"=result.ume$median[[type]])
} else if (type=="dev") {
dev.df <- data.frame("nma"=as.vector(result$median[[type]]),
"ume"=as.vector(result.ume$median[[type]]))
}
dev.df$ratio <- log(dev.df$nma/dev.df$ume)
dev.df$cutoff[dev.df$ratio>cutoff/dev.df$nma] <- "High deviance"
dev.df$cutoff[is.na(dev.df$cutoff)] <- "Normal deviance"
g <- ggplot(dev.df, aes(x=nma, y=ume)) +
geom_point(aes(colour=factor(cutoff))) +
coord_cartesian(xlim=c(0,lim), ylim=c(0,lim)) +
geom_abline(slope=1, intercept=0, linetype="dashed")
return(g)
}
######## Run NMA ##########
run.nma <- function(bugsdat, TE="random", ume=FALSE, outcome=NULL, save=TRUE,
outresults=FALSE, n.iter=30000, n.burnin=NULL, bugs="winbugs") {
if (ume==TRUE) {
if (TE=="random") {
savefile <- paste0(outcome, ".ume.re.result.Rdata")
model <- "~/NICE TSU/WinBUGS TSD/TSD4-SmokingRE_IndEffects.odc"
} else if (TE=="fixed") {
savefile <- paste0(outcome, ".ume.fe.result.Rdata")
model <- "~/NICE TSU/WinBUGS TSD/TSD4-ThromboFE_IndEffects.odc"
}
} else if (ume==FALSE) {
if (TE=="random") {
savefile <- paste0(outcome, ".re.result.Rdata")
model <- "~/NICE TSU/WinBUGS TSD/TSD2-1cRE_Bi_logit.odc"
} else if (TE=="fixed") {
savefile <- paste0(outcome, ".fe.result.Rdata")
model <- "~/NICE TSU/WinBUGS TSD/TSD2-1dFE_Bi_logit.odc"
}
}
# Set BUGS executable directors
if (bugs=="winbugs") {
bugsdir <- file.path("C:", "Users", "hp17602", "OneDrive - University of Bristol",
"Documents", "WinBUGS14")
} else if (bugs=="openbugs") {
bugsdir <- file.path("C:", "Program Files (x86)", "OpenBUGS", "OpenBUGS323", "OpenBUGS.exe")
}
# Remove and add bits of data to allow running in WinBUS
inclstudyID <- bugsdat$studyID
bugsdat$studyID <- NULL
if (ume==FALSE) {
# Add inits
init1 <- list(
"d"=c(NA, rep(0, bugsdat$nt-1)),
#"sd"= 0.1,
"mu"=rep(0, bugsdat$ns)
)
init2 <- list(
"d"=c(NA, rep(-2, bugsdat$nt-1)),
#"sd"= 0.5,
"mu"=rep(2, bugsdat$ns)
)
init3 <- list(
"d"=c(NA, rep(1, bugsdat$nt-1)),
#"sd"= 1,
"mu"=rep(-1, bugsdat$ns)
)
} else if (ume==TRUE) {
# Add inits for UME
d <- matrix(nrow=bugsdat$nt, ncol=bugsdat$nt)
for (i in 1:(nrow(d)-1)) {
for (k in (i+1):(ncol(d))) {
d[i,k] <- 0
}
}
if (TE=="random") {
d <- d[-nrow(d),]
}
init1 <- list(
"d"=d,
#"delta"=d,
#"sd"= 0.1,
"mu"=rep(0, bugsdat$ns)
)
init2 <- list(
"d"=ifelse(d==0,-2,d),
#"delta"=ifelse(d==0,-2,d),
#"sd"= 0.5,
"mu"=rep(2, bugsdat$ns)
)
init3 <- list(
"d"=ifelse(d==0,1,d),
#"delta"=ifelse(d==0,1,d),
#"sd"= 1,
"mu"=rep(-1, bugsdat$ns)
)
}
# Add SD to inits
if (TE=="random") {
init1$sd <- 0.1
init2$sd <- 0.5
init3$sd <- 1
}
inits <- list(init1, init2, init3)
params <- c("d", "dev", "resdev", "totresdev")
if (TE=="random") {
params <- append(params, "sd")
}
if (outresults==TRUE) {
params <- append(params, c("or", "lor", "rk", "best", "prob"))
}
if (bugs=="winbugs") {
result <- bugs(data=bugsdat, inits=inits,
parameters.to.save = params,
model.file=model,
n.chains=3,
n.thin=10,
n.iter=n.iter,
n.burnin = n.burnin,
bugs.directory=bugsdir,
debug=TRUE
)
} else if (bugs=="openbugs") {
result <- R2OpenBUGS::bugs(data=bugsdat, inits=inits,
parameters.to.save = params,
model.file=model,
n.chains=3,
n.thin=1,
n.iter=n.iter,
n.burnin = n.burnin,
OpenBUGS.pgm=bugsdir,
debug=TRUE
)
}
if (save==TRUE) {
save(result, outcome, bugsdat, trtnames, file=savefile)
}
return(result)
}
# Select studies with zero in at least one arm
select.zeros <- function(df) {
zero.df <- df[0,]
studies <- unique(df$studyID)
for (i in seq_along(studies)) {
subset <- subset(df, studyID==studies[i])
if (any(subset$r==0)) {
zero.df <- rbind(zero.df, subset)
}
}
out <- subset(df, !(studyID %in% zero.df$studyID))
# Plot zero.df
mtc <- zero.df %>% rename(
study=studyID,
treatment=trt,
responders=r,
sampleSize=N
)
mtc <- mtc.network(mtc)
plot(mtc)
# Plot out
mtc <- out %>% rename(
study=studyID,
treatment=trt,
responders=r,
sampleSize=N
)
mtc <- mtc.network(mtc)
plot(mtc)
return(list(zero.df, out))
}
# Drop studies with zero arms in all arms
drop.zeros <- function(df) {
zeroID <- vector()
studies <- unique(df$studyID)
for (i in seq_along(studies)) {
subset <- subset(df, studyID==studies[i])
if (all(subset$r==0)) {
zeroID <- append(zeroID, studies[i])
}
}
print(paste0("Dropping ", length(zeroID),
" studies with zero arms:",
paste(zeroID, collapse=", ")))
df <- subset(df, !(studyID %in% zeroID))
return(df)
}
# Add continuity correction
add.continuity <- function(df, studyID=NULL) {
if (is.null(studyID)) {
studies <- unique(df$studyID)
} else {
studies <- studyID
}
contID <- vector()
for (i in seq_along(studies)) {
subset <- subset(df, studyID==studies[i])
for (k in 1:nrow(subset)) {
if (subset$r[k]==0) {
df$r[df$studyID==studies[i]][k] <- df$r[df$studyID==studies[i]][k] + 0.5
df$N[df$studyID==studies[i]][k] <- df$N[df$studyID==studies[i]][k] + 1
print(paste0("Study ", studies[i], " random allocation: ",
paste(subset$N, collapse=" ")))
contID <- append(contID, studies[i])
}
}
}
print(paste0("Added continuity correction to ", length(contID),
" studies: ",
paste(contID, collapse=", ")))
return(df)
}
drop.bugs <- function(bugsdat, drops=vector()) {
if (length(drops)>0) {
index <- which(bugsdat$studyID %in% drops)
if ("studyID" %in% names(bugsdat)) {
bugsdat$studyID <- bugsdat$studyID[-index]
}
bugsdat$ns <- bugsdat$ns-length(index)
bugsdat$na <- bugsdat$na[-index]
bugsdat$r <- bugsdat$r[-index,]
bugsdat$n <- bugsdat$n[-index,]
bugsdat$t <- bugsdat$t[-index,]
print("CHECK THAT TREATMENTS ALL STILL CONNECT!!")
}
return(bugsdat)
}
# Checks bugsdat to see if there are zero responders or equal probabilities
check.bugsdat <- function(bugsdat, dropzero=TRUE, dropequalp=TRUE) {
id.zero <- vector()
id.equalp <- vector()
dropID <- vector()
for (i in 1:nrow(bugsdat$r)) {
zero <- 0
rvec <- bugsdat$r[i,][!is.na(bugsdat$r[i,])]
nvec <- bugsdat$n[i,][!is.na(bugsdat$n[i,])]
for (k in 1:bugsdat$na[i]) {
if (bugsdat$r[i,k]==bugsdat$n[i,k] | bugsdat$r[i,k]==0 | bugsdat$r[i,k]==0.5) {
zero <- zero+1
}
}
# If all arms equal max or min
dropstudy <- FALSE
if (zero==bugsdat$na[i]) {
if (dropzero==TRUE) {dropstudy <- TRUE}
id.zero <- append(id.zero, bugsdat$studyID[i])
} else if (length(unique(rvec/nvec))==1 &
length(unique(rvec))==1) {
if (dropequalp==TRUE) {
#dropstudy <- TRUE
}
#id.equalp <- append(id.equalp, bugsdat$studyID[i])
}
if (dropstudy==TRUE) {
dropID <- append(dropID, i)
}
}
# Remove study
if (length(dropID)>0) {
bugsdat$ns <- bugsdat$ns - length(dropID)
bugsdat$studyID <- bugsdat$studyID[-c(dropID)]
bugsdat$na <- bugsdat$na[-c(dropID)]
bugsdat$r <- bugsdat$r[-c(dropID),]
bugsdat$n <- bugsdat$n[-c(dropID),]
bugsdat$t <- bugsdat$t[-c(dropID),]
}
print(paste0("Dropping ", length(id.zero),
" studies with all responders = 0 or all responders=N: ",
paste(id.zero, collapse=", ")))
# print(paste0("Dropping ", length(id.equalp),
#              " studies with equal responders and N in each arm: ",
#              paste(id.equalp, collapse=", ")))
print("CHECK THAT TREATMENTS ALL STILL CONNECT!!")
return(bugsdat)
}
getbugsdata <- function(df, likelihood="binom") {
# Likelihood can be "binom" or "normal"
# Ensure df is sorted
df <- arrange(df, study.index, arm)
# Generate empty matrices
r <- matrix(NA, nrow=length(unique(df$studyID)), ncol=max(df$Narms))
n <- r
t <- r
na <- r[,1]
studyID <- r[,1]
# Generate single values
ns <- nrow(r)
nt <- max(df$trt)
# Add data to empty matrices
for (i in seq_along(unique(df$studyID))) {
subset <- subset(df, studyID==unique(df$studyID)[i])
studyID[i] <- subset$studyID[1] # Should lead to vector with no NAs and no errors (check)
na[i] <- subset$Narms[1] # Should lead to vector with no NAs and no errors (check)
for (k in 1:nrow(subset)) {
if (likelihood=="binom") {
r[i,k] <- subset$r[k]
n[i,k] <- subset$N[k]
} else if (likelihood=="normal") {
r[i,k] <- subset$y[k]
n[i,k] <- subset$se[k]
}
t[i,k] <- subset$trt[k]
}
}
if (any(is.na(studyID))) {
stop("NAs present for `studyID`")
}
if (any(is.na(na))) {
stop("NAs present for `na`")
}
return(list("ns"=ns, "nt"=nt, "studyID"=studyID, "na"=na, "r"=r, "n"=n, "t"=t))
}
get.data <- function(df, outcome) {
if (paste0("r5.", outcome) %in% names(df)) {
df.mtc <- df %>% select(studyID, Narms, trt1, trt2, trt3, trt4, trt5,
paste0("r1.", outcome), paste0("N1.", outcome),
paste0("r2.", outcome), paste0("N2.", outcome),
paste0("r3.", outcome), paste0("N3.", outcome),
paste0("r4.", outcome), paste0("N4.", outcome),
paste0("r5.", outcome), paste0("N5.", outcome)
)
varying <- c("r1", "r2", "r3", "r4", "N1", "N2", "N3", "N4",
"r5", "N5")
} else {
df.mtc <- df %>% select(studyID, Narms, trt1, trt2, trt3, trt4, trt5,
paste0("r1.", outcome), paste0("N1.", outcome),
paste0("r2.", outcome), paste0("N2.", outcome),
paste0("r3.", outcome), paste0("N3.", outcome),
paste0("r4.", outcome), paste0("N4.", outcome)
)
varying <- c("r1", "r2", "r3", "r4", "N1", "N2", "N3", "N4")
}
varying <- paste(varying, outcome, sep=".")
df.reshape <- reshape(df.mtc, varying=varying,
sep="", idvar = c("studyID", "Narms"), direction="long",
timevar="arm")
df.reshape$arm <- as.numeric(sapply(df.reshape$arm, FUN=function(x) strsplit(x, split="[.]")[[1]][1]))
df.reshape$trt <- NA
df.reshape$trt <- (apply(df.reshape, MARGIN = 1, FUN=function(x) {
x[["trt"]] <- x[[paste0("trt", x[["arm"]])]]
})
)
# Set treatment names as factors
# trtnames <- c("NoTrt", "Plac", "vPGE2_tab", "vPGE2_gel", "vPGE2_slow", "PGF2_gel",
#               "icPGE2", "vPGE2_norm", "vMiso_b50", "vMiso_a50", "oMiso_b50", "oMiso_a50",
#               "oMiso_tit", "iMiso", "ivOxy", "Amnio", "ivOxyAmnio", "NO", "Mife", "Oest",
#               "Cort", "Rel", "Hyal", "mFolCat", "mLam", "mDblBal", "MemSweep", "eaPGE2PGF2",
#               "ivProst", "Sex", "Acu", "Breast", "Homeo", "CasOil", "oProst", "bMiso", "HotBath",
#               "Enema", "Herb")
#
# # Change Plac to 1 and NoTrt to 2 in codes
# df.reshape$trt[df.reshape$trt==1] <- 0
# df.reshape$trt[df.reshape$trt==2] <- 1
# df.reshape$trt[df.reshape$trt==0] <- 2
# trtnames <- trtnames[c(2,1, 3:length(trtnames))]
# Set treatment names as factors
trtnames <- c("Plac", "NoTrt", "vPGE2_tab", "vPGE2_gel", "vPGE2_slow", "PGF2_gel",
"icPGE2", "vPGE2_norm", "vMiso_b50", "vMiso_a50", "oMiso_b50", "oMiso_a50",
"oMiso_tit", "iMiso", "ivOxy", "Amnio", "ivOxyAmnio", "NO", "Mife", "Oest",
"Cort", "Rel", "Hyal", "mFolCat", "mLam", "mDblBal", "MemSweep", "eaPGE2PGF2",
"ivProst", "Sex", "Acu", "Breast", "Homeo", "CasOil", "oProst", "bMiso", "HotBath",
"Enema", "Herb")
df.reshape$trt <- factor(df.reshape$trt, levels=trtnames)
# Add arm indices (to account for Notrt and Plac being switched)
df.reshape <- arrange(df.reshape, studyID, trt)
df.reshape <- df.reshape %>%
group_by(studyID) %>%
mutate(arm = sequence(n()))
df.mtc <- df.reshape
# Drop NA values
df.mtc <- df.mtc[!is.na(df.mtc$r),]
# Add other trial info
df.mtc$cervix <- df$Cervix[match(df.mtc$studyID, df$studyID)]
df.mtc$prevstudyID <- df$`Trial name in original dataset`[match(df.mtc$studyID, df$studyID)]
# Rename columns
mtc <- df.mtc %>% rename(
study=studyID,
treatment=trt,
responders=r,
sampleSize=N
)
# Make MTC network
mtc <- mtc.network(mtc)
plot(mtc)
return(df.mtc)
}
drop.excltrt <- function(df, excltrt) {
drops <- vector()
for (i in seq_along(excltrt)) {
for (study in seq_along(unique(df$studyID))) {
subset <- subset(df, df$studyID==unique(df$studyID)[study])
if (excltrt[i] %in% subset$trt) {
drops <- append(drops, subset$studyID[1])
}
}
}
drops <- unique(drops)
df <- subset(df, !(df$studyID %in% drops))
warning(paste0("The following ", length(drops),
" studies have been dropped: ",
paste(drops, collapse=", ")))
return(df)
}
recode.trts <- function(df) {
warning("Function should always be run after excluded treatments have been removed")
nettrt <- as.character(sort(unique(df$trt)))
df$trt <- as.numeric(factor(as.numeric(df$trt)))
return(list("df"=df, "trtnames"=nettrt))
}
load("cs.re.result.RData")
