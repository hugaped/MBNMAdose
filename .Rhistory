}
i
plot(nonparam)
devtools::load_all(".")
plot(nonparam)
devtools::load_all(".")
plot(nonparam)
g <- plot(nonparam)
plot(g)
g
devtools::load_all(".")
plot(nonparam)
plot(nonparam)
devtools::load_all(".")
plot(nonparam)
devtools::load_all(".")
plot(nonparam)
modellist <- list(linear, emax, emax.class, emax.noplac)
for (i in seq_along(modellist)) {
expect_silent(plot(modellist[[i]]))
}
i
devtools::load_all(".")
for (i in seq_along(modellist)) {
expect_silent(plot(modellist[[i]]))
}
plot(nonparam)
g <- plot(nonparam)
class(g)
expect_equal("ggplot" %in% class(plot(nonparam)), TRUE)
g <- plot(emax)
g
g$facet
g$facet()
g$facet$params
g$layers
g$facet
g$facet$params
g$facet$params$ncol
g$facet$params$nrow
g$facet$params$labeller()
g$facet$params$as.table
g$facet$params$facets
g$facet$params$facets$doseparam
g$facet$params$strip.position
g$facet$params$dir
g$mapping
g$coordinates
g$labels
g$data
g$scales
g$scales()
g$layers
g$layers[[1]]
g$theme
g$coordinates
g$facet$params
g$facet$params$facets$doseparam
names(g$facet$params$facets)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 2)
g <- plot(emax.class)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
plot(emax, params="d.1")
plot(emax, params="d.1")
plot(emax, params="rabbit")
expect_error(plot(emax, params="rabbit"))
expect_error(plot(emax, params="rabbit"))
g <- plot(emax, params = "d.emax")
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
emax
g <- plot(emax, params = "d.emax")
g <- plot(emax, params = "emax")
devtools::load_all(".")
g <- plot(emax, params = "d.emax")
devtools::load_all(".")
g <- plot(emax, params = "d.emax")
grepl("d\\.", "d.emax")
devtools::load_all(".")
g <- plot(emax, params = "d.emax")
g
g <- plot(emax, params = "d.emax")
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
plot(emax, agent.labs = network$agents)
plot(emax, agent.labs = network$agents[-1])
plot(emax, agent.labs = network$agents[-1:3])
plot(emax, agent.labs = network$agents[-3])
devtools::load_all(".")
plot(emax, agent.labs = network$agents[-3])
devtools::load_all(".")
plot(emax, agent.labs = network$agents[-3])
plot(emax, agent.labs = network$agents)
devtools::load_all(".")
plot(emax, agent.labs = network$agents)
devtools::load_all(".")
plot(emax, agent.labs = network$agents)
devtools::load_all(".")
plot(emax, agent.labs = network$agents)
devtools::load_all(".")
plot(emax, agent.labs = network$agents)
plot(emax, agent.labs = network$agents[-3])
expect_error(plot(emax, agent.labs = network$agents[-3]))
devtools::load_all(".")
expect_silent(plot(emax, agent.labs = network$agents))
expect_error(plot(emax, agent.labs = network$agents[-3]))
emax.class2 <- MBNMA.emax(netclass, emax="rel", ed50="rel", method="common",
class.effect=list(emax="random"))
plot(emaxclass2)
plot(emax.class2)
plot(emax.class2, agent.labs = network$agents, class.labs=netclass$classes)
testthat::test_that("plot.MBNMA functions correctly", {
for (i in seq_along(modellist)) {
expect_silent(plot(modellist[[i]]))
}
expect_equal("ggplot" %in% class(plot(nonparam)), TRUE)
# Test number of panels is equal to number of rel effect parameters
g <- plot(emax)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 2)
g <- plot(emax.class)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
# params argument
expect_error(plot(emax, params="rabbit"))
g <- plot(emax, params = "d.emax")
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
# Agent labs
expect_silent(plot(emax, agent.labs = network$agents))
expect_error(plot(emax, agent.labs = network$agents[-3]))
# Class labs
expect_silent(
plot(emax.class2, agent.labs = network$agents, class.labs=netclass$classes))
})
devplot(emax)
g <- devplot(emax, dev.type="resdev", plot.type = "scatter")
g <- devplot(emax.class, dev.type="dev", plot.type = "box")
g <- devplot(emax.class, dev.type="resdev", plot.type = "box")
g <- devplot(emax.class, dev.type="resdev", plot.type = "box", facet=FALSE)
get.theta.dev(emax.class, param="resdev")
dev.df <- update.mbnma(emax.class, param="resdev")
dev.df
devtools::load_all(".")
g <- devplot(emax.class, dev.type="resdev", plot.type = "box")
g <- devplot(emax.class, dev.type="resdev", plot.type = "scatter")
devtools::load_all(".")
g <- devplot(emax.class, dev.type="resdev", plot.type = "scatter")
expect_error(devplot(emax, dev.type="dev"))
g <- devplot(emax.noplac, dev.type="resdev", plot.type = "box")
emax.noplac
emax.noplac$agents
expect_silent(devplot(emax.noplac, dev.type="resdev", facet = FALSE))
expect_message(devplot(emax.noplac, dev.type="resdev", facet = FALSE))
expect_message(devplot(emax, dev.type="resdev", plot.type = "scatter"))
expect_message(devplot(emax.class, dev.type="resdev", plot.type = "box"))
expect_message(devplot(emax.noplac, dev.type="resdev", plot.type = "box"))
resdev <- MBNMA.linear(network, parameters.to.save = "resdev")
expect_silent(devplot(resdev, dev.type="resdev"))
plot(resdev)
expect_error(plot(resdev))
expect_message(devplot(emax, dev.type="resdev", plot.type = "scatter"))
expect_message(fitplot(emax, dev.type="resdev", plot.type = "scatter"))
theta.run <- MBNMA.run(network, fun="linear", parameters.to.save = "theta")
expect_silent(fitplot(resdev, dev.type="resdev"))
devtools::load_all(".")
fitplot(emax, disp.obs = TRUE)
mbnma$treatments
emax$agents
emax$treatments
emax$model.arg$treatments
devtools::load_all(".")
fitplot(emax, disp.obs = TRUE)
emax <- MBNMA.emax(network, emax="rel", ed50="rel", method="random")
emax$treatments
emax.class <- MBNMA.emax(netclass, emax="rel", ed50="random", method="common",
class.effect=list(emax="random"))
emax.class2 <- MBNMA.emax(netclass, emax="rel", ed50="rel", method="common",
class.effect=list(emax="random"))
nonparam <- MBNMA.run(network, fun="nonparam.up")
emax.noplac <- MBNMA.emax(net.noplac, emax="rel", ed50="rel", method="random")
fitplot(emax, disp.obs = TRUE)
expect_message(fitplot(emax.class, disp.obs=FALSE))
theta.run <- MBNMA.run(network, fun="linear", parameters.to.save = "theta")
expect_silent(fitplot(theta.run))
ranks
rank
plot(rank)
rank <- rank.MBNMA(emax)
rank
plot(rank)
rank <- rank.MBNMA(emax.class)
rank <- rank.MBNMA(emax.noplac)
plot(rank)
length(g)
rank <- rank.MBNMA(emax)
g <- plot(rank)
expect_silent(plot(g))
expect_equal(length(g), 2)
plot(g)
rank <- rank.MBNMA(linear.run)
expect_silent(plot(rank))
rank <- rank.MBNMA(emax.noplac)
g <- plot(rank, params="d.emax")
length()
length(g)
expect_silent(plot(rank, treat.labs = net.noplac$agents))
expect_silent(plot(rank, treat.labs = network$agents))
rank$d.emax$summary
devtools::load_all(".")
expect_silent(plot(rank, treat.labs = net.noplac$agents))
devtools::load_all(".")
plot(rank, treat.labs = net.noplac$agents)
rank <- rank.MBNMA(emax.noplac)
rank, treat.labs = net.noplac$agents)
plot(rank, treat.labs = net.noplac$agents)
plot(rank, treat.labs = network$agents)
expect_silent(plot(rank, treat.labs = net.noplac$agents))
expect_error(plot(rank, treat.labs = network$agents))
?rank
?rank.MBNMA
rank <- rank.MBNMA(emax.noplac, to.rank=c(3,5,6))
rank
rank <- rank.MBNMA(emax.noplac, to.rank=c(3,5,6))
expect_silent(plot(rank, treat.labs = network$agents[3,5,6]))
expect_error(plot(rank, treat.labs = net.noplac$agents))
expect_silent(plot(rank, treat.labs = network$agents[c(3,5,6)]))
expect_error(plot(rank, treat.labs = net.noplac$agents))
testthat::context("Testing plot.functions")
network <- MBNMA.network(HF2PPITT)
# Generate data without placebo
noplac.df <- network$data.ab[network$data.ab$narm>2 & network$data.ab$agent!=1,]
net.noplac <- MBNMA.network(noplac.df)
netlist <- list(network, net.noplac)
# Models
linear <- MBNMA.run(network, fun="linear")
emax <- MBNMA.emax(network, emax="rel", ed50="rel", method="random")
emax.class <- MBNMA.emax(netclass, emax="rel", ed50="random", method="common",
class.effect=list(emax="random"))
emax.class2 <- MBNMA.emax(netclass, emax="rel", ed50="rel", method="common",
class.effect=list(emax="random"))
nonparam <- MBNMA.run(network, fun="nonparam.up")
emax.noplac <- MBNMA.emax(net.noplac, emax="rel", ed50="rel", method="random")
resdev <- MBNMA.linear(network, parameters.to.save = "resdev")
modellist <- list(linear, emax, emax.class, emax.noplac)
###################################################
################## Run Tests ######################
###################################################
test_that("plot.MBNMA.network functions correctly", {
expect_silent(plot(network, layout_in_circle = TRUE,
edge.scale=1, label.distance=0))
expect_silent(plot(network, layout_in_circle = FALSE,
edge.scale=1, label.distance=0))
expect_silent(plot(network, layout_in_circle = FALSE,
edge.scale=0.5, label.distance=10))
g1 <- plot(network, layout_in_circle = TRUE,
level="treatment")
g2 <- plot(network, layout_in_circle = TRUE,
level="agent")
expect_silent(plot(g1))
expect_silent(plot(g2))
expect_equal(length(V(g1))==length(V(g2)), FALSE)
expect_silent(plot(network, layout_in_circle = TRUE,
level="agent", remove.loops = TRUE))
expect_message(plot(net.noplac, layout_in_circle = TRUE,
level="agent"))
expect_warning(plot(net.noplac, layout_in_circle = TRUE,
level="agent", doseparam = 5))
g1 <- plot(network, layout_in_circle = TRUE,
level="treatment", v.color = "agent")
g2 <- plot(net.noplac, layout_in_circle = TRUE,
level="treatment", v.color="agent")
expect_equal("Placebo_0" %in% names(V(g1)), TRUE)
expect_equal(length(network$treatments), length(V(g1)))
expect_equal(length(unique(V(g1)$color)), length(network$agents))
expect_equal("Placebo" %in% names(V(g2)), TRUE)
expect_equal(length(net.noplac$treatments), length(V(g2))-1)
expect_equal(length(unique(V(g2)$color)), length(net.noplac$agents)+1)
expect_equal(length(unique(E(g2)$color)), 2)
expect_error(plot(network, layout_in_circle = TRUE,
level="class"))
})
testthat::test_that("plot.MBNMA functions correctly", {
for (i in seq_along(modellist)) {
expect_silent(plot(modellist[[i]]))
}
expect_equal("ggplot" %in% class(plot(nonparam)), TRUE)
# Test number of panels is equal to number of rel effect parameters
g <- plot(emax)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 2)
g <- plot(emax.class)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
# params argument
expect_error(plot(emax, params="rabbit"))
g <- plot(emax, params = "d.emax")
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
# Agent labs
expect_silent(plot(emax, agent.labs = network$agents))
expect_error(plot(emax, agent.labs = network$agents[-3]))
# Class labs
expect_silent(
plot(emax.class2, agent.labs = network$agents, class.labs=netclass$classes))
# No relative effects saved
expect_error(plot(resdev))
})
testthat::test_that("plot.MBNMA.predict functions correctly", {
})
testthat::test_that("devplot functions correctly", {
expect_message(devplot(emax, dev.type="resdev", plot.type = "scatter"))
expect_message(devplot(emax.class, dev.type="resdev", plot.type = "box"))
expect_message(devplot(emax.noplac, dev.type="resdev", plot.type = "box"))
expect_message(devplot(emax.noplac, dev.type="resdev", facet = FALSE))
expect_silent(devplot(resdev, dev.type="resdev"))
expect_error(devplot(emax, dev.type="dev"))
})
testthat::test_that("fitplot functions correctly", {
expect_message(fitplot(emax, disp.obs = TRUE))
expect_message(fitplot(emax.class, disp.obs=FALSE))
theta.run <- MBNMA.run(network, fun="linear", parameters.to.save = "theta")
expect_silent(fitplot(theta.run))
})
testthat::test_that("plot.MBNMA.rank functions correctly", {
rank <- rank.MBNMA(emax)
g <- plot(rank)
expect_equal(length(g), 2)
rank <- rank.MBNMA(linear.run)
expect_silent(plot(rank))
rank <- rank.MBNMA(emax.noplac)
g <- plot(rank, params="d.emax")
expect_equal(length(g), 1)
expect_silent(plot(rank, treat.labs = net.noplac$agents))
expect_error(plot(rank, treat.labs = network$agents))
rank <- rank.MBNMA(emax.noplac, to.rank=c(3,5,6))
expect_silent(plot(rank, treat.labs = network$agents[c(3,5,6)]))
expect_error(plot(rank, treat.labs = net.noplac$agents))
})
g <- plot(net.noplac, layout_in_circle = TRUE,
level="agent")
E(g)
sort(E(g))
c(E(g)[15:19], E(g)[1:14])
c(E(g)[14:19], E(g)[1:13])
E(g) <- c(E(g)[14:19], E(g)[1:13])
devtools::load_all(".")
g <- plot(net.noplac, layout_in_circle = TRUE,
level="agent")
devtools::load_all(".")
g <- plot(net.noplac, layout_in_circle = TRUE,
level="agent")
devtools::load_all(".")
g <- plot(net.noplac, layout_in_circle = TRUE,
level="agent")
g <- plot(net.noplac, layout_in_circle = TRUE,
level="agent", remove.loops = TRUE)
g <- plot(net.noplac, layout_in_circle = TRUE,
level="treatments", remove.loops = TRUE)
g <- plot(net.noplac, layout_in_circle = TRUE,
level="treatment", remove.loops = TRUE)
g <- plot(net.noplac, layout_in_circle = TRUE,
level="agent", remove.loops = TRUE, doseparam = 3)
predict(linear)
predict(linear, E0.data = network$data.ab[network$data.ab$agent==1,])
predict(linear, E0.estimate = network$data.ab[network$data.ab$agent==1,])
ref.df <- network$data.ab[network$data.ab$agent==1,]
result <- ref.synth(ref.df)
ref.df <- network$data.ab[network$data.ab$agent==1,]
result <- ref.synth(ref.df, mbnma=emax, synth="fixed")
result
names(result)
expect_equal(names(result)=="m.mu", TRUE)
nrow(result$m.mu)
emax$n.iter
expect_equal(nrow(result$m.mu), emax$n.iter)
expect_equal(nrow(result$m.mu), emax$BUGSoutput$n.sims)
result <- ref.synth(ref.df, mbnma=emax.class, synth="fixed")
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="fixed")
result
names(result)
result <- ref.synth(ref.df, mbnma=linear, synth="fixed")
ref.df <- network$data.ab[network$data.ab$agent==2,]
result <- ref.synth(ref.df, mbnma=linear, synth="fixed")
expect_error(ref.synth(ref.df, mbnma=linear, synth="fixed"))
ref.df <- network$data.ab[network$data.ab$agent==2 & network$data.ab$dose==1,]
ref.df
expect_error(ref.synth(ref.df, mbnma=linear, synth="fixed"))
expect_error(ref.synth(ref.df, mbnma=linear, synth="fixed"), NA)
expect_error(ref.synth(ref.df, mbnma=emax.noplac, synth="arndom"))
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random")
expect_identical(names(result), c("m.mu", "sd.mu"))
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=500)
devtools::load_all(".")
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=500)
devtools::load_all(".")
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=500)
devtools::load_all(".")
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=500)
devtools::load_all(".")
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=500)
devtools::load_all(".")
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=500)
devtools::load_all(".")
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.thin=5)
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.thin=15)
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=500)
result$m.mu
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.thin=15)
result
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.chains=5)
result
result$m.mu
nrow(result$m.mu)
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.burnin=500)
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500)
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500)
expect_equal(nrow(result$sd.mu), 1500)
testthat::test_that("ref.synth functions correctly", {
ref.df <- network$data.ab[network$data.ab$agent==1,]
result <- ref.synth(ref.df, mbnma=emax, synth="fixed")
expect_equal(length(result), 1)
expect_equal(names(result)=="m.mu", TRUE)
expect_equal(nrow(result$m.mu), emax$BUGSoutput$n.sims)
ref.df <- network$data.ab[network$data.ab$agent==2,]
expect_error(ref.synth(ref.df, mbnma=linear, synth="fixed"))
ref.df <- network$data.ab[network$data.ab$agent==2 & network$data.ab$dose==1,]
expect_error(ref.synth(ref.df, mbnma=linear, synth="fixed"), NA)
expect_error(ref.synth(ref.df, mbnma=emax.noplac, synth="arndom"))
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500)
expect_identical(names(result), c("m.mu", "sd.mu"))
expect_equal(nrow(result$sd.mu), 1500)
})
x <- c(-5,1,0)
rescale.link(x, direction="link", link="identity")
x <- c(-5,1,0)
y <- rescale.link(x, direction="link", link="identity")
expect_identical(x,y)
y <- rescale.link(x, direction="natural", link="identity")
expect_identical(x,y)
y <- rescale.link(x, direction="natural", link="logit")
y
expect_identical(y, logit(x))
expect_identical(y, log(x/1-x))
expect_identical(y, log(x/(1-x)))
log(x/(1-x)
)
expect_identical(y, exp(x/(1+x)))
exp(x/(1+x))
rescale.link(x, direction="link", link="logit")
expect_error(rescale.link(x, direction="link", link="logit"))
expect_warning(rescale.link(x, direction="link", link="logit"))
expect_silent(rescale.link(x, direction="link", link="probit"))
rescale.link(x, direction="link", link="probit")
rescale.link(x, direction="natural", link="probit")
testthat::test_that("rescale.link functions correctly", {
x <- c(-5,1,0)
y <- rescale.link(x, direction="link", link="identity")
expect_identical(x,y)
y <- rescale.link(x, direction="natural", link="identity")
expect_identical(x,y)
expect_silent(rescale.link(x, direction="natural", link="logit"))
expect_warning(rescale.link(x, direction="link", link="logit"))
expect_warning(rescale.link(x, direction="link", link="probit"))
expect_silent(rescale.link(x, direction="natural", link="probit"))
})
E0 <- "rnorm(nsims, 7, 0.5)"
predict(linear, E0.estimate = network$data.ab[network$data.ab$agent==1,])
predict(linear, E0.data = E0)
predict(linear, E0.data = list(E0))
predict(linear, E0.data = 2)
devtools::load_all(".")
predict(linear, E0.data = 2)
result
predict(linear, E0.data = 0.3)
predict(linear, E0.data = -0.3)
predict(linear, E0.data = 0.3)
predict(linear, E0.data = 0.9)
predict(linear, E0.data = 1)
predict(linear, E0.data = 0.99)
predict(linear, E0.data = 0.01)
predict(linear, E0.data = 1.5)
expect_error(predict(linear, E0.data = 1.5))
expect_warning(predict(linear, E0.data = 1.5))
expect_silent(predict(linear, E0.data = 0.01))
expect_silent(predict(linear, E0.data = 0.99))
expect_warning(predict(linear, E0.data = 1.5))
expect_silent(predict(linear, E0.data = "nrorm(nsims, 0.5,0.1)"))
expect_silent(predict(linear, E0.data = "rnorm(nsims, 0.5,0.1)"))
?rbeta
?rbin
?rbern
?rbernoulli
expect_silent(predict(linear, E0.data = "rbernoulli(nsims, 0.5)"))
rbernoulli(nsims, 0.5)
expect_silent(predict(linear, E0.data = "rbeta(nsims, shape1=1, shape2=5)"))
expect_silent(predict(linear, E0.data = "rnorm(nsims, 0.5,0.01)"))
expect_silent(predict(linear, E0.data = "rbeta(nsims, shape1=1, shape2=5)"))
expect_silent(predict(linear, E0.data = "badgers(nsims, shape1=1, shape2=5)"))
expect_error(predict(linear, E0.data = "badgers(nsims, shape1=1, shape2=5)"))
predict(linear, E0.data = "rbeta(badgers, shape1=1, shape2=5)")
expect_error(predict(linear, E0.data = "badgers(nsims, shape1=1, shape2=5)"))
expect_error(predict(linear, E0.data = "rbeta(badgers, shape1=1, shape2=5)"))
ref.df <- network$data.ab[network$data.ab$agent==1,]
predict(linear, E0.estimate = ref.df)
pred <- predict(linear, E0.estimate = ref.df)
names(pred)
expect_equal(linear$model.arg$likelihood, pred$likelihood)
expect_equal(linear$model.arg$link, pred$link)
pred$predicts
names(pred$predicts)
expect_identical(names(pred$predicts), linear$agents)
pred$predicts[[4]]
(as.numeric(names(pred$predicts[[4]])))
expect_silent(as.numeric(names(pred$predicts[[4]])))
pred$predicts[[4]][[4]]
names(pred$predicts[[4]][[4]])
class(pred$predicts[[4]][[4]])
expect_equal(class(pred$predicts[[4]][[4]]), "matrix")
expect_equal(nrow(pred$predicts[[4]][[4]]), linear$BUGSoutput$n.sims)
