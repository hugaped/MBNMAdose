beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10, priors = list("sd" = "dunif(0,1)")
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10, priors = list("sd" = "dunif(0,0.1)")
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="common",
n.iter=10000, n.thin=10
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10, priors = list("sd" = "dunif(0,0.01)")
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10, priors = list("sd" = "dunif(0,0.001)")
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10, priors = list("sd" = "dunif(0,0.0001)")
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10, priors = list("sd" = "dunif(0,0.000001)")
)
re.5
re4
re.4
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10, priors = list("sd" = "dunif(0,0.1)", "beta.3"="dnorm(0,0.01)")
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10, priors = list("sd" = "dunif(0,0.1)", "beta.3"="dnorm(1,0.01)")
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10, priors = list("sd" = "dunif(0,0.1)", "beta.3"="dnorm(-1,0.01)")
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10, priors = list("sd" = "dunif(0,0.1)", "beta.3"="dnorm(-1,10)")
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10, priors = list("sd" = "dunif(0,0.1)", "beta.3"="dnorm(0,10)")
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10, priors = list("sd" = "dunif(0,0.1)", "beta.3"="dnorm(0,100)")
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10, priors = list("sd" = "dunif(0,0.1)", "beta.3"="dnorm(1,100)")
)
cat(re.5$model.arg$jagscode)
0^-1000
0^1000
0^-1
devtools::load_all(".")
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10
)
devtools::load_all(".")
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10
)
exp(-1000)
5^exp(-1000)
5^exp(-100000)
5^exp(100000)
5^exp(1000)
5^exp(100)
5^exp(10)
5^exp(1)
exp(1)
5^10
5^100
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10,
priors=list(beta.3="dnorm(0,0.01)")
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10,
priors=list(beta.3="dnorm(0,0.1)")
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10,
priors=list(beta.3="dnorm(0,1)")
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10,
priors=list("beta.3"="dnorm(0,1)", "sd"="dunif(0,2)")
)
exp(-)
exp(0)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10,
priors=list("beta.3"="dnorm(0,100)", "sd"="dunif(0,2)")
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="common",
n.iter=10000, n.thin=10,
priors=list("beta.3"="dnorm(0,100)", "sd"="dunif(0,2)")
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="common",
n.iter=10000, n.thin=10,
priors=list("beta.3"="dnorm(0,100)")
)
re.5
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="common",
n.iter=10000, n.thin=10,
priors=list("beta.3"="dnorm(0,100)")
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="rel",
method="common",
n.iter=10000, n.thin=10
)
re.5
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="rel",
method="random",
n.iter=10000, n.thin=10
)
devtools::load_all(".")
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="rel",
method="random",
n.iter=10000, n.thin=10
)
re.5
exp(-0.373)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="rel",
method="random",
n.iter=20000, n.thin=15
)
re.5
re.6 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=15000, n.thin=10
)
re.6 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="random",
method="random",
n.iter=15000, n.thin=10
)
re.6 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=15000, n.thin=10,
priors=list("beta.3"="dnorm(0,0.01)")
)
re.6 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="random",
method="random",
n.iter=15000, n.thin=10,
priors=list("beta.3"="dnorm(0,0.01)")
)
re.6 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=15000, n.thin=10,
priors=list("beta.3"="dnorm(0,0.1)")
)
re.5 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="rel",
method="random",
n.iter=20000, n.thin=15
)
re.6 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3=-1,
method="random",
n.iter=15000, n.thin=10
)
re.6 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3=1,
method="random",
n.iter=15000, n.thin=10
)
devtools::load_all(".")
re.6 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3=1,
method="random",
n.iter=15000, n.thin=10
)
re.6
cat(re.6$model.arg$jagscode)
devtools::load_all(".")
re.6 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3=1,
method="random",
n.iter=15000, n.thin=10
)
cat(re.6$model.arg$jagscode)
devtools::load_all(".")
re.6 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3=1,
method="random",
n.iter=15000, n.thin=10
)
cat(re.6$model.arg$jagscode)
test <- MBNMA.run(network, fun="emax",
beta.1="rel",
beta.2="common",
method="random",
n.iter=15000, n.thin=10
)
test <- MBNMA.run(network, fun="emax",
beta.1="rel",
beta.2="common",
method="random",
n.iter=1000, n.thin=10
)
cat(test$model.arg$jagscode)
devtools::load_all(".")
re.6 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3=1,
method="random",
n.iter=15000, n.thin=10
)
re.6 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3=1,
method="random",
n.iter=10000, n.thin=10
)
cat(re.6$model.arg$jagscode)
re.6
re.6 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="rel",
method="random",
n.iter=10000, n.thin=10
)
re.6 <- MBNMA.run(network, fun="emax.hill",
beta.1="rel",
beta.2="rel",
beta.3="common",
method="random",
n.iter=10000, n.thin=10
)
plot(network)
plot(network, v.color="agent")
plot(network, v.color="agent", level="agent")
plot(network, level="agent")
plot(network, level="agent", remove.loops = TRUE)
plot(network, level="agent", remove.loops = TRUE, v.scale = 1)
plot(network, level="treatment", remove.loops = TRUE, v.scale = 1)
cols <- genmaxcols()
vols
cols
V(g)
igraph::V(g)
g
data.ab <- network$data.ab
level
temp <- factor(data.ab$agent, labels=network$agents)
if (level=="agent") {
if (!("agents" %in% names(network))) {
stop("`level` has been set to `agent` but there are no agent codes given in the dataset")
}
nodes <- network[["agents"]]
data.ab$treatment <- as.character(temp)
} else if (level=="treatment") {
data.ab$treatment <- paste(as.character(temp), data.ab$dose, sep="_")
nodes <- sort(unique(data.ab$treatment))
}
# Calculate participant numbers (if v.scale not NULL)
if (!is.null(v.scale)) {
if (!("N" %in% names(data.ab))) {
stop("`N` not included as a column in dataset. Vertices/nodes will all be scaled to be the same size.")
}
size.vec <- vector()
for (i in seq_along(nodes)) {
size.vec <- append(size.vec, sum(data.ab$N[data.ab$treatment==nodes[i]]))
}
# Scale size.vec by the max node.size
size.vec <- size.vec/ (max(size.vec)/20)
node.size <-
setNames(size.vec, nodes)
node.size <- as.matrix(node.size*v.scale)
} else {
node.size <- NULL
}
comparisons <- MBNMA.comparisons(data.ab)
g <- igraph::graph.empty()
g <- g + igraph::vertex(nodes)
ed <- t(matrix(c(comparisons[["t1"]], comparisons[["t2"]]), ncol = 2))
edges <- igraph::edges(as.vector(ed), weight = comparisons[["nr"]], arrow.mode=0)
g <- g + edges
disconnects <- check.network(g)
if (!("agents" %in% names(network))) {
stop("`level` has been set to `agent` but there are no agent codes given in the dataset")
}
cols[nodes]
nodes
cols
V(g)$color
igraph::V(g)$color
igraph::V(g)$color <- cols[1:length(nodes)]
g
plot(g)
devtools::load_all(".")
plot(network)
plot(network, v.color = "agent")
plot(network, level="agent", v.color = "agent")
level <- "treatment"
data.ab <- network$data.ab
# Check if level="agent" that agents are present in dataset
temp <- factor(data.ab$agent, labels=network$agents)
if (level=="agent") {
if (!("agents" %in% names(network))) {
stop("`level` has been set to `agent` but there are no agent codes given in the dataset")
}
nodes <- network[["agents"]]
data.ab$treatment <- as.character(temp)
} else if (level=="treatment") {
data.ab$treatment <- paste(as.character(temp), data.ab$dose, sep="_")
nodes <- sort(unique(data.ab$treatment))
}
# Calculate participant numbers (if v.scale not NULL)
if (!is.null(v.scale)) {
if (!("N" %in% names(data.ab))) {
stop("`N` not included as a column in dataset. Vertices/nodes will all be scaled to be the same size.")
}
size.vec <- vector()
for (i in seq_along(nodes)) {
size.vec <- append(size.vec, sum(data.ab$N[data.ab$treatment==nodes[i]]))
}
# Scale size.vec by the max node.size
size.vec <- size.vec/ (max(size.vec)/20)
node.size <-
setNames(size.vec, nodes)
node.size <- as.matrix(node.size*v.scale)
} else {
node.size <- NULL
}
comparisons <- MBNMA.comparisons(data.ab)
# Code to make graph.create as an MBNMA command if needed
g <- igraph::graph.empty()
g <- g + igraph::vertex(nodes)
ed <- t(matrix(c(comparisons[["t1"]], comparisons[["t2"]]), ncol = 2))
edges <- igraph::edges(as.vector(ed), weight = comparisons[["nr"]], arrow.mode=0)
g <- g + edges
if (remove.loops==TRUE) {
g <- igraph::simplify(g, remove.multiple = FALSE, remove.loops = TRUE)
}
# Check network is connected and produce warning message if not
disconnects <- check.network(g)
cols <- genmaxcols()
cols[sapply(nodes, function(x) strsplit(x, "[_]")[[1]][1])]
igraph::V(g)$color <- cols[1:length(sapply(nodes, function(x) strsplit(x, "[_]")[[1]][1]))]
plot(g)
V(g)
igraph::V(g)
node.size
nodes
network$agents
sapply(nodes, function(x) strsplit(x, "[_]")[[1]][1])
sapply(nodes, function(x) strsplit(x, "[_]")[[1]][1])
temp <- sapply(nodes, function(x) strsplit(x, "[_]")[[1]][1])
factor(temp, labels=col[1:length(unique(temp))])
temp
as.character(temp)
temp <- as.character(sapply(nodes, function(x) strsplit(x, "[_]")[[1]][1]))
as.numeric(factor(temp))
cols[as.numeric(factor(temp))]
nodes
devtools::load_all(".")
plot(network, v.color = "agent")
plot(network, v.color = "agent", level="agent")
plot(network, v.color = "agent")
devtools::load_all(".")
plot(network, v.color = "agent")
plot(network, v.color = "agent", level="agent")
plot(network, v.color = "agent")
re.6$model.arg$arg.params
get("cat")
get("badger")
exists("badger")
mbnma <- re.5
mbnma$model.arg
devtools::load_all(".")
plot(re.5)
re.4
plot(re.4)
plot(re.3)
re.3
re.4
re.3
re.4
