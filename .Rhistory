doses <- list(c(0,1,2,3), c(0.5,1,2))
expect_error(predict(linear, E0.data=0.1, exact.doses = doses))
dose <- c(0,0.5,1,2,4)
doses <- list()
for (i in seq_along(network$agents)) {
doses[[length(doses)+1]] <- dose
}
expect_silent(predict(emax, E0.data=0.1, exact.doses = doses))
doses <- list("eletriptan"=c("I","am","a","test"), "rizatriptan"=c(0.5,1,2))
expect_error(predict(linear, E0.data=0.1, exact.doses = doses))
doses <- list("badger"=c(0,1,2,3), "rizatriptan"=c(0.5,1,2))
expect_error(predict(linear, E0.data=0.1, exact.doses = doses))
#### Repeat sections with emax.noplac ####
max.doses <- list()
for (i in seq_along(net.noplac$agents)) {
max.doses[[length(max.doses)+1]] <- 1
}
pred <- predict(emax.noplac, E0.data=0.1, max.doses = max.doses)
expect_identical(names(pred$predicts), emax.noplac$agents)
expect_error(print(pred), NA)
expect_equal(class(summary(pred)), "data.frame")
})
print(rank)
summary(rank)
class(summary(rank))
testthat::context("Testing rank.functions")
network <- MBNMA.network(HF2PPITT)
# Make class data
df <- HF2PPITT
df$class <- ifelse(df$agent=="placebo", "placebo", "active")
df$class <- ifelse(df$agent=="eletriptan", "active2", df$class)
netclass <- MBNMA.network(df)
# Make data with no placebo
noplac.df <- network$data.ab[network$data.ab$narm>2 & network$data.ab$agent!=1,]
net.noplac <- MBNMA.network(noplac.df)
# Models
linear.run <- MBNMA.run(network, fun="linear")
exponential <- MBNMA.exponential(network, lambda="rel", method="common")
emax <- MBNMA.emax(network, emax="rel", ed50="rel", method="random")
emax.class <- MBNMA.emax(netclass, emax="rel", ed50="random", method="common",
class.effect=list(emax="random"))
nonparam <- MBNMA.run(network, fun="nonparam.up")
emax.noplac <- MBNMA.emax(net.noplac, emax="rel", ed50="rel", method="random")
testthat::test_that("rank.MBNMA functions correctly", {
rank <- rank.MBNMA(linear.run)
expect_equal(names(rank), "d.1")
expect_equal(names(rank[[1]]), c("summary", "prob.matrix", "rank.matrix"))
expect_equal(class(rank[[1]]$summary), "data.frame")
expect_equal(class(rank[[1]]$rank.matrix), "matrix")
expect_equal(class(rank[[1]]$prob.matrix), "matrix")
expect_error(print(rank), NA)
expect_equal(class(summary(rank)), "list")
rank <- rank.MBNMA(emax)
expect_equal(names(rank), c("d.emax", "d.ed50"))
expect_equal(names(rank[[1]]), c("summary", "prob.matrix", "rank.matrix"))
expect_equal(class(rank[[2]]$summary), "data.frame")
expect_equal(class(rank[[1]]$rank.matrix), "matrix")
expect_equal(class(rank[[2]]$prob.matrix), "matrix")
expect_error(print(rank), NA)
expect_equal(class(summary(rank)), "list")
# Checking direction=1 and direction=-1 are opposites
rank.down <- rank.MBNMA(emax, direction=-1)
expect_equal(rank.down$d.emax$summary$rank.param[rank.down$d.emax$summary$`50%`==1]==
rank$d.emax$summary$rank.param[rank$d.emax$summary$`50%`==7],
TRUE)
expect_error(print(rank.down), NA)
expect_equal(class(summary(rank)), "list")
to.ranks <- c(2,5,6)
rank <- rank.MBNMA(exponential, to.rank = to.ranks)
expect_equal(ncol(rank$d.lambda$rank.matrix), length(to.ranks))
expect_error(rank.MBNMA(exponential, to.rank = c(1,5,6)))
expect_error(rank.MBNMA(exponential, to.rank = c("eletriptan", "sumatriptan")))
# Test classes
expect_error(rank.MBNMA(emax, level="class"))
expect_error(rank.MBNMA(emax.class, level="agent"))
rank <- rank.MBNMA(emax.class, level="class")
expect_equal(ncol(rank$D.emax$rank.matrix), 2)
expect_error(print(rank), NA)
expect_equal(class(summary(rank)), "list")
expect_error(rank.MBNMA(nonparam))
# Test params
rank <- rank.MBNMA(emax)
expect_equal(names(rank), c("d.emax", "d.ed50"))
rank <- rank.MBNMA(emax, params="d.ed50")
expect_equal(names(rank), c("d.ed50"))
expect_error(rank.MBNMA(emax, params="test"))
expect_error(print(rank), NA)
expect_equal(class(summary(rank)), "list")
# With no placebo data
rank <- rank.MBNMA(emax.noplac)
expect_equal(names(rank), c("d.emax", "d.ed50"))
expect_equal(names(rank[[1]]), c("summary", "prob.matrix", "rank.matrix"))
expect_equal(class(rank[[2]]$summary), "data.frame")
expect_equal(class(rank[[1]]$rank.matrix), "matrix")
expect_equal(class(rank[[2]]$prob.matrix), "matrix")
expect_error(print(rank), NA)
expect_equal(class(summary(rank)), "list")
})
testthat::test_that("rank.MBNMA.predict functions correctly", {
pred <- predict(linear.run, E0.data = 0.5)
rank <- rank.MBNMA.predict(pred)
expect_equal(names(rank), "Predictions")
expect_equal(names(rank$Predictions), c("summary", "prob.matrix", "rank.matrix", "direction"))
expect_equal(class(rank$Predictions$summary), "data.frame")
expect_equal(class(rank$Predictions$rank.matrix), "matrix")
expect_equal(class(rank$Predictions$prob.matrix), "matrix")
doses <- list("eletriptan"=c(0,1,2,3), "rizatriptan"=c(0.5,1,2))
pred <- predict(emax, E0.data = "rbeta(nsims, shape1=1, shape2=5)",
exact.doses=doses)
rank <- rank.MBNMA.predict(pred)
expect_equal(names(rank), "Predictions")
expect_equal(names(rank$Predictions), c("summary", "prob.matrix", "rank.matrix", "direction"))
expect_equal(class(rank$Predictions$summary), "data.frame")
expect_equal(class(rank$Predictions$rank.matrix), "matrix")
expect_equal(class(rank$Predictions$prob.matrix), "matrix")
expect_equal(nrow(rank$Predictions$summary), length(unlist(doses)))
# Test direction
rank.up <- rank.MBNMA.predict(pred, direction=-1)
rank.down <- rank.MBNMA.predict(pred, direction=1)
expect_equal(rank.down$Predictions$summary$rank.param[rank.down$Predictions$summary$`50%`==min(rank.down$Predictions$summary$`50%`)],
rank.up$Predictions$summary$rank.param[rank.up$Predictions$summary$`50%`==max(rank.up$Predictions$summary$`50%`)]
)
# Test rank.doses
doses <- list("eletriptan"=c(0,1,2,3), "rizatriptan"=c(0.5,1,2))
pred <- predict(emax, E0.data = "rbeta(nsims, shape1=1, shape2=5)",
exact.doses=doses)
rank <- rank.MBNMA.predict(pred, rank.doses = list("eletriptan"=2, "rizatriptan"=2))
expect_equal(nrow(rank$Predictions$summary), 2)
expect_error(rank.MBNMA.predict(pred, rank.doses = list("badger"=2, "rizatriptan"=2)), "badger")
expect_error(rank.MBNMA.predict(pred, rank.doses = list("eletriptan"=c(2, 50, 100), "rizatriptan"=2)), "cannot be included in ranking: 50\\, 100")
})
expect_error(print(split), NA)
expect_equal(class(summary(split)[[1]]), "data.frame")
summary(split)
expect_equal(class(summary(split)), "data.frame")
testthat::context("Testing rank.functions")
network <- MBNMA.network(HF2PPITT)
# Make class data
df <- HF2PPITT
df$class <- ifelse(df$agent=="placebo", "placebo", "active")
df$class <- ifelse(df$agent=="eletriptan", "active2", df$class)
netclass <- MBNMA.network(df)
# Make data with no placebo
noplac.df <- network$data.ab[network$data.ab$narm>2 & network$data.ab$agent!=1,]
net.noplac <- MBNMA.network(noplac.df)
# Models
linear.run <- MBNMA.run(network, fun="linear")
exponential <- MBNMA.exponential(network, lambda="rel", method="common")
emax <- MBNMA.emax(network, emax="rel", ed50="rel", method="random")
emax.class <- MBNMA.emax(netclass, emax="rel", ed50="random", method="common",
class.effect=list(emax="random"))
nonparam <- MBNMA.run(network, fun="nonparam.up")
emax.noplac <- MBNMA.emax(net.noplac, emax="rel", ed50="rel", method="random")
testthat::test_that("rank.MBNMA functions correctly", {
rank <- rank.MBNMA(linear.run)
expect_equal(names(rank), "d.1")
expect_equal(names(rank[[1]]), c("summary", "prob.matrix", "rank.matrix"))
expect_equal(class(rank[[1]]$summary), "data.frame")
expect_equal(class(rank[[1]]$rank.matrix), "matrix")
expect_equal(class(rank[[1]]$prob.matrix), "matrix")
expect_error(print(rank), NA)
expect_equal(class(summary(rank)[[1]]), "data.frame")
rank <- rank.MBNMA(emax)
expect_equal(names(rank), c("d.emax", "d.ed50"))
expect_equal(names(rank[[1]]), c("summary", "prob.matrix", "rank.matrix"))
expect_equal(class(rank[[2]]$summary), "data.frame")
expect_equal(class(rank[[1]]$rank.matrix), "matrix")
expect_equal(class(rank[[2]]$prob.matrix), "matrix")
expect_error(print(rank), NA)
expect_equal(class(summary(rank)[[1]]), "data.frame")
# Checking direction=1 and direction=-1 are opposites
rank.down <- rank.MBNMA(emax, direction=-1)
expect_equal(rank.down$d.emax$summary$rank.param[rank.down$d.emax$summary$`50%`==1]==
rank$d.emax$summary$rank.param[rank$d.emax$summary$`50%`==7],
TRUE)
expect_error(print(rank.down), NA)
expect_equal(class(summary(rank)[[1]]), "data.frame")
to.ranks <- c(2,5,6)
rank <- rank.MBNMA(exponential, to.rank = to.ranks)
expect_equal(ncol(rank$d.lambda$rank.matrix), length(to.ranks))
expect_error(rank.MBNMA(exponential, to.rank = c(1,5,6)))
expect_error(rank.MBNMA(exponential, to.rank = c("eletriptan", "sumatriptan")))
# Test classes
expect_error(rank.MBNMA(emax, level="class"))
expect_error(rank.MBNMA(emax.class, level="agent"))
rank <- rank.MBNMA(emax.class, level="class")
expect_equal(ncol(rank$D.emax$rank.matrix), 2)
expect_error(print(rank), NA)
expect_equal(class(summary(rank)[[1]]), "data.frame")
expect_error(rank.MBNMA(nonparam))
# Test params
rank <- rank.MBNMA(emax)
expect_equal(names(rank), c("d.emax", "d.ed50"))
rank <- rank.MBNMA(emax, params="d.ed50")
expect_equal(names(rank), c("d.ed50"))
expect_error(rank.MBNMA(emax, params="test"))
expect_error(print(rank), NA)
expect_equal(class(summary(rank)[[1]]), "data.frame")
# With no placebo data
rank <- rank.MBNMA(emax.noplac)
expect_equal(names(rank), c("d.emax", "d.ed50"))
expect_equal(names(rank[[1]]), c("summary", "prob.matrix", "rank.matrix"))
expect_equal(class(rank[[2]]$summary), "data.frame")
expect_equal(class(rank[[1]]$rank.matrix), "matrix")
expect_equal(class(rank[[2]]$prob.matrix), "matrix")
expect_error(print(rank), NA)
expect_equal(class(summary(rank)[[1]]), "data.frame")
})
testthat::test_that("rank.MBNMA.predict functions correctly", {
pred <- predict(linear.run, E0.data = 0.5)
rank <- rank.MBNMA.predict(pred)
expect_equal(names(rank), "Predictions")
expect_equal(names(rank$Predictions), c("summary", "prob.matrix", "rank.matrix", "direction"))
expect_equal(class(rank$Predictions$summary), "data.frame")
expect_equal(class(rank$Predictions$rank.matrix), "matrix")
expect_equal(class(rank$Predictions$prob.matrix), "matrix")
doses <- list("eletriptan"=c(0,1,2,3), "rizatriptan"=c(0.5,1,2))
pred <- predict(emax, E0.data = "rbeta(nsims, shape1=1, shape2=5)",
exact.doses=doses)
rank <- rank.MBNMA.predict(pred)
expect_equal(names(rank), "Predictions")
expect_equal(names(rank$Predictions), c("summary", "prob.matrix", "rank.matrix", "direction"))
expect_equal(class(rank$Predictions$summary), "data.frame")
expect_equal(class(rank$Predictions$rank.matrix), "matrix")
expect_equal(class(rank$Predictions$prob.matrix), "matrix")
expect_equal(nrow(rank$Predictions$summary), length(unlist(doses)))
# Test direction
rank.up <- rank.MBNMA.predict(pred, direction=-1)
rank.down <- rank.MBNMA.predict(pred, direction=1)
expect_equal(rank.down$Predictions$summary$rank.param[rank.down$Predictions$summary$`50%`==min(rank.down$Predictions$summary$`50%`)],
rank.up$Predictions$summary$rank.param[rank.up$Predictions$summary$`50%`==max(rank.up$Predictions$summary$`50%`)]
)
# Test rank.doses
doses <- list("eletriptan"=c(0,1,2,3), "rizatriptan"=c(0.5,1,2))
pred <- predict(emax, E0.data = "rbeta(nsims, shape1=1, shape2=5)",
exact.doses=doses)
rank <- rank.MBNMA.predict(pred, rank.doses = list("eletriptan"=2, "rizatriptan"=2))
expect_equal(nrow(rank$Predictions$summary), 2)
expect_error(rank.MBNMA.predict(pred, rank.doses = list("badger"=2, "rizatriptan"=2)), "badger")
expect_error(rank.MBNMA.predict(pred, rank.doses = list("eletriptan"=c(2, 50, 100), "rizatriptan"=2)), "cannot be included in ranking: 50\\, 100")
})
testthat::context("Testing inconsistency.functions")
### Datasets ####
network <- MBNMA.network(HF2PPITT)
# Generate data without placebo
noplac.df <- network$data.ab[network$data.ab$narm>2 & network$data.ab$agent!=1,]
net.noplac <- MBNMA.network(noplac.df)
testthat::test_that("test.inconsistency.loops", {
expect_equal(nrow(inconsistency.loops(network$data.ab)), 4)
expect_equal(nrow(inconsistency.loops(net.noplac$data.ab)), 8) # more loops since ref treatment has changed
incon <- inconsistency.loops(network$data.ab)
expect_identical(names(incon), c("t1", "t2", "path"))
})
testthat::test_that("test.MBNMA.nodesplit", {
split <- MBNMA.nodesplit(network, likelihood = "binomial", link="logit",
method="common", n.iter=1000)
expect_equal(nrow(inconsistency.loops(network$data.ab)), length(split))
expect_equal(class(split), "MBNMA.nodesplit")
expect_identical(names(split[[1]]), c("comparison",
"direct", "indirect", "nma",
"overlap matrix", "p.values", "quantiles",
"forest.plot", "density.plot",
"direct.model", "indirect.model", "nma.model"))
expect_equal(is.numeric(split[[1]]$p.values), TRUE)
expect_equal(is.numeric(split[[2]]$indirect), TRUE)
expect_equal(is.numeric(split[[3]]$direct), TRUE)
expect_equal(length(split[[4]]$comparison), 2)
expect_identical(class(split[[1]]$forest.plot), c("gg", "ggplot"))
expect_identical(class(split[[2]]$density.plot), c("gg", "ggplot"))
expect_error(print(split), NA)
expect_equal(class(summary(split)), "data.frame")
split <- MBNMA.nodesplit(net.noplac, likelihood = "binomial", link="logit",
method="random", n.iter=1000)
expect_equal(nrow(inconsistency.loops(net.noplac$data.ab)), length(split))
expect_equal(class(split), "MBNMA.nodesplit")
expect_identical(names(split[[1]]), c("comparison",
"direct", "indirect", "nma",
"overlap matrix", "p.values", "quantiles",
"forest.plot", "density.plot",
"direct.model", "indirect.model", "nma.model"))
expect_equal(is.numeric(split[[1]]$p.values), TRUE)
expect_equal(is.numeric(split[[2]]$indirect), TRUE)
expect_equal(is.numeric(split[[3]]$direct), TRUE)
expect_equal(length(split[[4]]$comparison), 2)
expect_identical(class(split[[1]]$forest.plot), c("gg", "ggplot"))
expect_identical(class(split[[2]]$density.plot), c("gg", "ggplot"))
expect_error(print(split), NA)
expect_equal(class(summary(split)), "data.frame")
# Test drop.discon
split <- MBNMA.nodesplit(net.noplac, likelihood = "binomial", link="logit",
method="random", n.iter=1000, drop.discon = FALSE)
expect_equal(nrow(inconsistency.loops(net.noplac$data.ab)), length(split))
expect_equal(class(split), "MBNMA.nodesplit")
expect_identical(names(split[[1]]), c("comparison",
"direct", "indirect", "nma",
"overlap matrix", "p.values", "quantiles",
"forest.plot", "density.plot",
"direct.model", "indirect.model", "nma.model"))
expect_equal(is.numeric(split[[1]]$p.values), TRUE)
expect_equal(is.numeric(split[[2]]$indirect), TRUE)
expect_equal(is.numeric(split[[3]]$direct), TRUE)
expect_equal(length(split[[4]]$comparison), 2)
expect_identical(class(split[[1]]$forest.plot), c("gg", "ggplot"))
expect_identical(class(split[[2]]$density.plot), c("gg", "ggplot"))
expect_error(print(split), NA)
expect_equal(class(summary(split)), "data.frame")
# Test comparisons
split <- MBNMA.nodesplit(net.noplac, likelihood = "binomial", link="logit",
method="random", n.iter=1000, drop.discon = FALSE,
comparisons = rbind(c(18,20), c(17,20)))
expect_equal(2, length(split))
expect_error(print(split), NA)
expect_equal(class(summary(split)), "data.frame")
split <- MBNMA.nodesplit(network, likelihood = "binomial", link="logit",
method="random", n.iter=1000, drop.discon = FALSE,
comparisons = rbind(c("sumatriptan_0.5","rizatriptan_0.5")))
expect_equal(1, length(split))
expect_error(print(split), NA)
expect_equal(class(summary(split)), "data.frame")
expect_error(MBNMA.nodesplit(network, likelihood = "binomial", link="logit",
method="random", n.iter=1000, drop.discon = FALSE,
comparisons = rbind(c("badger","rizatriptan_0.5"))),
"Treatment names given")
expect_error(MBNMA.nodesplit(network, likelihood = "binomial", link="logit",
method="random", n.iter=1000, drop.discon = FALSE,
comparisons = rbind(c("sumatriptan_0.5","rizatriptan_0.5"),
c("zolmitriptan_4", "eletriptan_1"),
c("naratriptan_2", "Placebo_0"))))
})
devtools::load_all(".")
rank(emax)
devtools::load_all(".")
temp <- rank(emax)
temp
summary(temp)
temp <- rank(pred)
temp
summary(temp)
MBNMA.comparisons(HF2PPITT)
HF2PPITT
MBNMA.comparisons(network$data.ab)
warnings()
drop.disconnected(net.noplac)
drop.disconnected(net.noplac, connect.dose=TRUE)
drop.disconnected(net.noplac)
drop.disconnected(net.noplac, connect.dose=TRUE)
doses <- list("eletriptan"=c(0,1,2,3), "rizatriptan"=c(0.5,1,2))
pred <- predict(emax, E0.data = "rbeta(nsims, shape1=1, shape2=5)",
exact.doses=doses)
rank <- rank.MBNMA.predict(pred,
rank.doses=list("eletriptan"=c(0,2), "rizatriptan"=2))
summary(rank)
rank
network
linear <- MBNMA.run(network, fun="linear")
ranks <- rank(linear, to.rank=c("Placebo", "eletriptan", "sumatriptan"))
summary(ranks)
devtools::load_all(".")
linear <- MBNMA.run(network, fun="linear")
ranks <- rank(linear, to.rank=c("Placebo", "eletriptan", "sumatriptan"))
summary(ranks)
devtools::load_all(".")
linear <- MBNMA.run(network, fun="linear")
ranks <- rank(linear, to.rank=c("Placebo", "eletriptan", "sumatriptan"))
summary(ranks)
ranks <- rank(linear, to.rank=c("Placebo", "eletriptan", "sumatriptan"))
ranks <- rank(linear, to.rank=c("zolitriptan", "eletriptan", "sumatriptan"))
lienar
linear
linear$agents
ranks <- rank(linear, to.rank=c("zolmitriptan", "eletriptan", "sumatriptan"))
rank
ranks
ranks <- rank(linear, to.rank=c("Placebo", "eletriptan", "sumatriptan"))
ranks <- rank(linear, to.rank=c("zolmitriptan", "eletriptan", "sumatriptan"))
summary(ranks)
test <- c(0,5,67,7)
test
test[test!=0]
devtools::load_all(".")
ranks <- rank(linear, to.rank=c("zolmitriptan", "eletriptan", "sumatriptan"))
summary(ranks)
ranks <- rank(linear, to.rank=c("Placecbo", "eletriptan", "sumatriptan"))
ranks <- rank(linear, to.rank=c("Placebo", "eletriptan", "sumatriptan"))
linear$agents
devtools::load_all(".")
ranks <- rank(linear, to.rank=c("Placebo", "eletriptan", "sumatriptan"))
devtools::load_all(".")
ranks <- rank(linear, to.rank=c("Placebo", "eletriptan", "sumatriptan"))
devtools::load_all(".")
ranks <- rank(linear, to.rank=c("Placebo", "eletriptan", "sumatriptan"))
summary(ranks)
emax <- MBNMA.emax(network, emax="rel", ed50="rel", method="random")
ranks <- rank(emax, params="ed50")
emax
ranks <- rank(emax, params="d.ed50")
devtools::load_all(".")
ranks <- rank(emax, params="ed50")
expect_error(rank(emax, params=c("badger", "d.ed50")))
summary(ranks)
class.df <- HF2PPITT
class.df$class <- ifelse(df$agent=="placebo", "placebo", "active")
netclass <- MBNMA.network(class.df)
emax <- MBNMA.emax(network, emax="rel", ed50="rel", method="random",
class.effect=list("ed50"="common"))
ranks <- rank(emax, level="class", direction=-1)
class.df
netclass <- MBNMA.network(class.df)
netclass
emax <- MBNMA.emax(netclass, emax="rel", ed50="rel", method="random",
class.effect=list("ed50"="common"))
ranks <- rank(emax, level="class", direction=-1)
ranks <- rank(emax, level="class", direction=-1, params="D.ed50")
emax
class.df <- HF2PPITT
class.df$class <- ifelse(df$agent=="placebo", "placebo", "active1")
class.df$class <- ifelse(df$agent=="eletriptan", "placebo", "active2")
netclass <- MBNMA.network(class.df)
emax <- MBNMA.emax(netclass, emax="rel", ed50="rel", method="random",
class.effect=list("ed50"="common"))
ranks <- rank(emax, level="class", direction=-1)
emax
max(emax[["model"]][["data"]]()[["class"]]
)
mbnma$BUGSoutput$long.short
emax$BUGSoutput$long.short
emax$BUGSoutput$root.short
emax
emax$BUGSoutput$root.short
devtools::load_all(".")
ranks <- rank(emax, level="class", direction=-1)
devtools::load_all(".")
ranks <- rank(emax, level="class", direction=-1)
devtools::load_all(".")
ranks <- rank(emax, level="class", direction=-1)
devtools::load_all(".")
ranks <- rank(emax, level="class", direction=-1)
devtools::load_all(".")
ranks <- rank(emax, level="class", direction=-1)
ranks
summary(ranks)
netclass
class.df <- HF2PPITT
class.df$class <- ifelse(df$agent=="placebo", "placebo", "active1")
class.df$class <- ifelse(df$agent=="eletriptan", "active2", df$agent)
netclass <- MBNMA.network(class.df)
netclass
class.df <- HF2PPITT
class.df$class <- ifelse(df$agent=="placebo", "placebo", "active1")
class.df$class <- ifelse(df$agent=="eletriptan", "active2", df$class)
class.df
netclass <- MBNMA.network(class.df)
class.df <- HF2PPITT
class.df$class <- ifelse(df$agent=="placebo", "placebo", "active1")
class.df$class <- ifelse(df$agent=="eletriptan", "active2", df$class)
netclass <- MBNMA.network(class.df)
netclass
emax <- MBNMA.emax(netclass, emax="rel", ed50="rel", method="random",
class.effect=list("ed50"="common"))
ema
emax
ranks <- rank(emax, level="class", direction=-1)
ranks
summary(ranks)
network <- MBNMA.network(HF2PPITT)
plot(network)
plot(network)
plot(network, level="agent", remove.loops=TRUE)
plot(network, v.color="agent", remove.loops=TRUE)
plot(network, level="treatment", doseparam=1)
devtools::load_all(".")
plot(network, level="treatment", doseparam=1)
plot(network, level="treatment", doseparam=1, remove.loops=TRUE)
plot(network, level="treatment", doseparam=2, remove.loops=TRUE)
noplac.df <- network$data.ab[network$data.ab$narm>2 & network$data.ab$agent!=1,]
net.noplac <- MBNMA.network(noplac.df)
plot(net.nonplac)
plot(net.noplac)
plot(network, level="treatment", doseparam=2)
plot(network, level="treatment", doseparam=2, remove.loops=TRUE)
plot(network, level="treatment", doseparam=1, remove.loops=TRUE)
plot(network, v.color="agent", remove.loops=TRUE, label.distance=3)
plot(network, v.color="agent", remove.loops=TRUE, label.distance=4)
plot(emax)
plot(emax, agent.labs = c("Placebo", "2", "3", "4", "5", "6", "7", "8"))
plot(emax, agent.labs = c("2", "3", "4", "5", "6", "7", "8"))
g <- plot(network, level="treatment", doseparam=2)
class(g)
linear <- MBNMA.run(network, fun="linear")
exponential <- MBNMA.run(network, fun="exponential")
plot(exponential)
emax <- MBNMA.emax(network, emax="rel", ed50="rel", method="random")
plot(emax, params=c("d.ed50"))
plot(emax, params=c("d.emax"))
class.df <- HF2PPITT
class.df$class <- ifelse(df$agent=="placebo", "placebo", "active1")
class.df$class <- ifelse(df$agent=="eletriptan", "active2", df$class)
netclass <- MBNMA.network(class.df)
emax <- MBNMA.emax(netclass, emax="rel", ed50="rel", method="random",
class.effect=list("ed50"="common"))
plot(emax, class.labs=c("Placebo", "Other Active", "Eletriptan"))
plot(emax, class.labs=c("Other Active", "Eletriptan"))
devtools::load_all(".")
plot(emax, class.labs=c("Other Active", "Eletriptan"))
devtools::load_all(".")
plot(emax, class.labs=c("Other Active", "Eletriptan"))
devtools::load_all(".")
plot(emax, class.labs=c("Other Active", "Eletriptan"))
devtools::load_all(".")
plot(emax, class.labs=c("Other Active", "Eletriptan"))
plot(emax, class.labs=c("Placebo", "Other Active", "Eletriptan"))
plot(emax, class.labs=c("Other Active", "Eletriptan"))
