network <- mbnma.network(HF2PPITT)
?plot
?summary
?print
?cat
?return
?list
devtools::document()
library(MBNMAdose)
?rank
network <- mbnma.network(HF2PPITT)
loops <- inconsistency.loops(network$data.ab)
loops
network
split <- nma.nodesplit(network, likelihood = "binomial", link="logit",
method="random", comparisons=rbind(c("eletriptan_0.5", "sumatriptan_0.5")))
split <- nma.nodesplit(network, likelihood = "binomial", link="logit",
method="random", comparisons=rbind(c(6,23), c(6,12)))
split <- nma.nodesplit(network, likelihood = "binomial", link="logit",
method="random", comparisons=rbind(c("eletriptan_0.5", "sumatriptan_0.5")))
split <- nma.nodesplit(network, likelihood = "binomial", link="logit",
method="random", comparisons=rbind(c(2, 5)))
network <- mbnma.network(HF2PPITT)
netgout <- mbnma.network(GoutSUA_2wkCFB)
netalog <- mbnma.network(alog_pcfb)
netclass <- mbnma.network(osteopain_2wkabs)
datalist <- list(HF2PPITT, GoutSUA_2wkCFB, alog_pcfb)
# Generate data without placebo
noplac.df <- network$data.ab[network$data.ab$narm>2 & network$data.ab$agent!=1,]
net.noplac <- mbnma.network(noplac.df)
netlist <- list(network, net.noplac)
# Models
linear <- mbnma.run(mbnma.network(alog_pcfb), fun="linear")
emax <- mbnma.emax(netgout, emax="rel", ed50="rel", method="random")
emax.tript <- mbnma.emax(network, emax="rel", ed50="rel", method="random")
emax.class <- mbnma.emax(netclass, emax="rel", ed50="random", method="common",
class.effect=list(emax="random"))
emax.class2 <- mbnma.emax(netclass, emax="rel", ed50="rel", method="common",
class.effect=list(emax="random"))
nonparam <- mbnma.run(network, fun="nonparam.up")
emax.noplac <- mbnma.emax(net.noplac, emax="rel", ed50="rel", method="random")
resdev <- mbnma.linear(network, parameters.to.save = "resdev")
modellist <- list(linear, emax, emax.class, emax.noplac)
###################################################
################## Run Tests ######################
###################################################
testthat::test_that("plot.mbnma functions correctly", {
for (i in seq_along(modellist)) {
expect_silent(plot(modellist[[i]]))
}
expect_equal("ggplot" %in% class(plot(nonparam)), TRUE)
# Test number of panels is equal to number of rel effect parameters
g <- plot(emax)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 2)
g <- plot(emax.class)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
# params argument
expect_error(plot(emax, params="rabbit"))
g <- plot(emax, params = "d.emax")
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
# Agent labs
expect_silent(plot(emax, agent.labs = netgout$agents))
expect_error(plot(emax, agent.labs = netgout$agents[-3]))
# Class labs
expect_silent(
plot(emax.class2, agent.labs = netclass$agents, class.labs=netclass$classes))
# No relative effects saved
expect_error(plot(resdev))
})
for (i in seq_along(modellist)) {
expect_silent(plot(modellist[[i]]))
}
expect_equal("ggplot" %in% class(plot(nonparam)), TRUE)
library(testthat)
testthat::test_that("plot.mbnma functions correctly", {
for (i in seq_along(modellist)) {
expect_silent(plot(modellist[[i]]))
}
expect_equal("ggplot" %in% class(plot(nonparam)), TRUE)
# Test number of panels is equal to number of rel effect parameters
g <- plot(emax)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 2)
g <- plot(emax.class)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
# params argument
expect_error(plot(emax, params="rabbit"))
g <- plot(emax, params = "d.emax")
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
# Agent labs
expect_silent(plot(emax, agent.labs = netgout$agents))
expect_error(plot(emax, agent.labs = netgout$agents[-3]))
# Class labs
expect_silent(
plot(emax.class2, agent.labs = netclass$agents, class.labs=netclass$classes))
# No relative effects saved
expect_error(plot(resdev))
})
for (i in seq_along(modellist)) {
expect_silent(plot(modellist[[i]]))
}
expect_equal("ggplot" %in% class(plot(nonparam)), TRUE)
modellist
testthat::test_that("plot.mbnma functions correctly", {
for (i in seq_along(modellist)) {
expect_silent(plot(modellist[[i]]))
}
expect_equal("ggplot" %in% class(plot(nonparam)), TRUE)
# Test number of panels is equal to number of rel effect parameters
g <- plot(emax)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 2)
g <- plot(emax.class)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
# params argument
expect_error(plot(emax, params="rabbit"))
g <- plot(emax, params = "d.emax")
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
# Agent labs
expect_silent(plot(emax, agent.labs = netgout$agents))
expect_error(plot(emax, agent.labs = netgout$agents[-3]))
# Class labs
expect_silent(
plot(emax.class2, agent.labs = netclass$agents, class.labs=netclass$classes))
# No relative effects saved
expect_error(plot(resdev))
})
library(MBNMAdose)
for (i in seq_along(modellist)) {
expect_silent(plot(modellist[[i]]))
}
expect_equal("ggplot" %in% class(plot(nonparam)), TRUE)
plot(nonparam)
g <- plot(emax)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 2)
g
g$data
unique(g$data[[names(g$facet$params$facets)]])
names(g$facet$params$facets)
g$facet$params$facets
g$facet$params$facets$`plotdata$doseparam`
g$data$doseparam
testthat::test_that("plot.mbnma functions correctly", {
for (i in seq_along(modellist)) {
expect_silent(plot(modellist[[i]]))
}
expect_equal("ggplot" %in% class(plot(nonparam)), TRUE)
# Test number of panels is equal to number of rel effect parameters
g <- plot(emax)
expect_equal(length(unique(g$data$doseparam)), 2)
g <- plot(emax.class)
expect_equal(length(unique(g$data$doseparam)), 1)
# params argument
expect_error(plot(emax, params="rabbit"))
g <- plot(emax, params = "d.emax")
expect_equal(length(unique(g$data$doseparam)), 1)
# Agent labs
expect_silent(plot(emax, agent.labs = netgout$agents))
expect_error(plot(emax, agent.labs = netgout$agents[-3]))
# Class labs
expect_silent(
plot(emax.class2, agent.labs = netclass$agents, class.labs=netclass$classes))
# No relative effects saved
expect_error(plot(resdev))
})
devtools::document()
?devtools::check_cran()
?devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
