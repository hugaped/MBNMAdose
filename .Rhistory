data.ab$agent <- as.numeric(data.ab$agent)
} else if (is.character(data.ab$agent)) {
data.ab$agent <- as.numeric(factor(data.ab$agent, labels=lvls))
}
agent.seq <- sort(unique(data.ab$agent))
for (i in seq_along(agent.seq)) {
# If all doses of a particular agent/class = 0 then recode to "Placebo"
if (all(data.ab$dose[data.ab$agent==agent.seq[i]]==0)) {
if (lvls[1]!="Placebo") {
# Swap current lvls for "Placebo"
lvls <- c("Placebo", lvls[lvls!=agent.seq[i]])
}
data.ab$agent[data.ab$agent==agent.seq[i]] <- 0
print.msg <- TRUE
} else if (any(data.ab$dose[data.ab$agent==agent.seq[i]]==0)) {
if (lvls[1]!="Placebo") {
# Add "Placebo"
lvls <- c("Placebo", lvls)
}
data.ab$agent[data.ab$agent==agent.seq[i] & data.ab$dose==0] <- 0
print.msg <- TRUE
}
}
if (print.msg==TRUE) {
message(paste0("Values for `", level, "` with dose = 0 have been recoded to `Placebo`"))
}
if (!identical(1:max(data.ab[[level]]), sort(unique(data.ab[[level]]))[-1])) {
message(paste0(level, " is being recoded to enforce sequential numbering and allow inclusion of `Placebo`"))
}
# Reorder by number sequentially (meaning that "Placebo" now is 1)
data.ab$agent <- as.numeric(factor(data.ab$agent, labels=lvls))
# if (is.factor(data.ab[[level]])) {
#   agents <- levels(data.ab[[level]])
#   match <- match(agents, as.character(data.ab[[level]]))
#   if (any(is.na(match))) {
#     agents <- agents[!is.na(match)]
#   }
# }
#
# if (is.numeric(data.ab[[level]])) {
#   if (max(data.ab[[level]]) != length(unique(data.ab[[level]])) |
#       !all.equal(data.ab[[level]], as.integer(data.ab[[level]]))
#   ) {
#     print(paste0(level, " is being recoded to enforce sequential numbering"))
#   }
#   agents <- sort(unique(data.ab[[level]]))
# }
#
# if (is.character(data.ab[[level]])) {
#   agents <- sort(unique(data.ab[[level]]))
#   agent.seq <- agents
#   for (i in seq_along(agent.seq)) {
#     if (all(dose.df$dose[dose.df[[level]]==agent.seq[i]]==0)) {
#       data.ab[[level]][data.ab[[level]]==agent.seq[i]] <- "Placebo"
#       agents <- agents[agents!=agent.seq[i]]
#       if (!("Placebo" %in% agents)) {
#         agents <- c("Placebo", agents)
#       }
#       message(paste0("Values for `", level, "` with dose = 0 have been recoded to Placebo"))
#     }
#   }
# }
# Numeric data must be checked that sequence is consistent for sequential numbering
# Factor data must be allocated codes based on factor levels
# Character data must be allocated codes automatically (alphabetically)
# # Must be numeric for MBNMA.run
# data.ab[[level]] <- as.numeric(factor(data.ab[[level]],
#                                    levels=agents)) # provide factor for sorting so that reference is as given by user
level
devtools::load_all(".")
recode.agent(df)
devtools::load_all(".")
recode.agent(df)
devtools::load_all(".")
devtools::load_all(".")
recode.agent(df)
network <- MBNMA.network(HF2PPITT)
devtools::load_all(".")
network <- MBNMA.network(HF2PPITT)
network
devtools::load_all(".")
warnings()
network <- MBNMA.network(HF2PPITT)
devtools::load_all(".")
network <- MBNMA.network(HF2PPITT)
network
network <- MBNMA.network(df)
network
df <- HF2PPITT
df$agent <- as.character(df$agent)
df$agent[df$dose==0] <- "almotriptan"
net <- MBNMA.network(df)
net
devtools::use_testthat()
df1 <- HF2PPITT
df.err <- df1[-1,]
MBNMA.validate.data(df.err)
df.err <- df1[-1,]
expect_error(MBNMA.validate.data(df.err))
library(testthat)
expect_error(MBNMA.validate.data(df.err))
df.err <- df1
df.err$dose[10,] <- -1
expect_error(MBNMA.validate.data(df.err))
df.err <- df1
df.err$dose[10,] <- -1
df.err$dose[10,]
df.err <- df1
df.err$dose[10,]
df.err
df.err$dose[10] <- -1
expect_error(MBNMA.validate.data(df.err))
MBNMA.validate.data(df.err)
?expect_error
df.err <- df1
df.err$dose[10] <- -1
expect_error(MBNMA.validate.data(df.err), regexp = "All values for `dose`")
df.err <- df1[-1,]
MBNMA.validate.data(df.err)
df.err <- df1[-1,]
expect_error(MBNMA.validate.data(df.err), regexp = "single study arm")
expect_silent(MBNMA.validate.data(HF2PPITT))
df.err <- df1[, names(df1)=="r"]
MBNMA.validate.data(df.err)
df1[, names(df1)=="r"]
df.err <- HF2PPITT[, names(HF2PPITT)=="r"]
df.err
df.err <- HF2PPITT[, names(HF2PPITT)!="r"]
MBNMA.validate.data(df.err)
df.err <- HF2PPITT[, names(HF2PPITT)!="r"]
expect_error(MBNMA.validate.data(df.err), regexp = "Required variable names are")
df.err <- HF2PPITT
df.err$r[20] <- NA
MBNMA.validate.data(df.err)
df.err <- HF2PPITT
df.err$r[20] <- NA
MBNMA.validate.data(df.err)
data.ab[[c("studyID", "agent")]]
devtools::load_all(".")
MBNMA.validate.data(df.err)
df.err <- HF2PPITT
df.err$r[20] <- NA
expect_error(MBNMA.validate.data(df.err), regexp = "NA values in:")
df.class <- HF2PPITT
df.class$class[df.class$agent %in% c(1:3)] <- 1
df.class$class[df.class$class!=1] <- 2
df.class$class
df.class$agent
df.class$agent==1
df.class$agent=="placebo"
df.class <- HF2PPITT
df.class$class[df.class$agent %in% c("placebo", "eletriptan")] <- 1
df.class$class[df.class$class!=1] <- 2
df.class
df.class <- HF2PPITT
df.class$class[df.class$agent %in% c("placebo", "eletriptan")] <- 1
df.class$class[is.na(df.class$class)] <- 2
df.class
expect_silent(MBNMA.validate.data(df.class))
df.err <- df.class
df.err$class[1] <- 2
MBNMA.validate.data(df.err)
df.err <- df.class
df.err$class[1] <- 2
expect_error(MBNMA.validate.data(df.err), regexp = "Class codes are different")
expect_equal(is.character(add_index(df1)[["treatments"]]), TRUE)
expect_equal(is.character(add_index(df1)[["treatments"]]), TRUE)
expect_equal(is.character(add_index(df1)[["agents"]]), TRUE)
expect_equal(is.character(add_index(df.class)[["class"]]), TRUE)
df.class
devtools::load_all(".")
expect_equal(is.character(add_index(df1)[["treatments"]]), TRUE)
expect_equal(is.character(add_index(df1)[["agents"]]), TRUE)
expect_equal(is.character(add_index(df.class)[["class"]]), TRUE)
add_index(df.class)
recoded <- recode.agent(df.class, level = "class")
recoded
recoded$data.ab
recoded$data.ab[recoded$data.ab$class==2]
recoded$data.ab$class
recoded$data.ab[recoded$data.ab$class==2,]
recoded <- recode.agent(data.ab, level = "class")
classes <- recoded[["lvlnames"]]
# Generate class key
#classdata <- data.ab[, names(data.ab) %in% c("agent", "class")]
classdata <- recoded[, names(recoded) %in% c("agent", "class")]
classkey <- unique(classdata)
classkey$agent <- factor(classkey$agent, labels=agents)
classkey$class <- factor(classkey$class, labels=classes)
recoded <- recode.agent(data.ab, level = "class")
classes <- recoded[["lvlnames"]]
# Generate class key
#classdata <- data.ab[, names(data.ab) %in% c("agent", "class")]
classdata <- recoded[, names(recoded) %in% c("agent", "class")]
recoded[, names(recoded) %in% c("agent", "class")]
devtools::load_all(".")
add_index(df.class)
expect_equal(is.character(add_index(df1)[["treatments"]]), TRUE)
expect_equal(is.character(add_index(df1)[["agents"]]), TRUE)
expect_equal(is.character(add_index(df.class)[["class"]]), TRUE)
add_index(df.class)
expect_equal(is.character(add_index(df1)[["treatments"]]), TRUE)
expect_equal(is.character(add_index(df1)[["agents"]]), TRUE)
expect_equal(is.character(add_index(df.class)[["classes"]]), TRUE)
expect_silent(MBNMA.validate.data(df.class))
expect_equal(index[["treatments"]][1], "Placebo_0")
index <- add_index(df1)
expect_equal(index[["treatments"]][1], "Placebo_0")
expect_equal(index[["treatments"]][1], "Placebo_0")
expect_equal(index[["agents"]][1], "Placebo")
index <- add_index(df.class)
# expect_equal(is.character(index[["treatments"]]), TRUE)
# expect_equal(is.character(index[["agents"]]), TRUE)
# expect_equal(is.character(index[["classes"]]), TRUE)
expect_equal(index[["treatments"]][1], "Placebo_0")
expect_equal(index[["agents"]][1], "Placebo")
expect_equal(index[["classes"]][1], "Placebo")
index <- add_index(df.class)
expect_equal(index[["treatments"]][1], "Placebo_0")
expect_equal(index[["agents"]][1], "Placebo")
expect_equal(index[["classes"]][1], "Placebo")
lvls <- c("treatments", "agents", "classes")
for (i in seq_along(lvls)) {
expect_equal(length(index[[lvls]]), length(unique(index$data.ab[[lvls]])))
}
index <- add_index(df.class)
expect_equal(index[["treatments"]][1], "Placebo_0")
expect_equal(index[["agents"]][1], "Placebo")
expect_equal(index[["classes"]][1], "Placebo")
lvls <- c("treatments", "agents", "classes")
for (i in seq_along(lvls)) {
expect_equal(length(index[[lvls[i]]]), length(unique(index$data.ab[[lvls[i]]])))
}
length(index[[lvls[i]]])
index$data.ab[[lvls[i]]]
lvls[i]
index <- add_index(df.class)
expect_equal(index[["treatments"]][1], "Placebo_0")
expect_equal(index[["agents"]][1], "Placebo")
expect_equal(index[["classes"]][1], "Placebo")
lvls <- c("treatments", "agents", "classes")
lvl <- c("treatment", "agent", "class")
for (i in seq_along(lvls)) {
expect_equal(length(index[[lvls[i]]]), length(unique(index$data.ab[[lvl[i]]])))
}
index$data.ab[[lvl[i]]]
i
length(index[[lvls[i]]])
length(unique(index$data.ab[[lvl[i]]]))
index[[lvls[i]]]
index$data.ab[[lvl[i]]]
df.class
df.class[df.class$agent=="placebo",]
df.class$class[df.class$agent=="placebo"]
devtools::load_all(".")
index <- add_index(df.class)
recode.agent(df.class, level="class")
devtools::load_all(".")
recode.agent(df.class, level="class")
data.ab <- df.class
level <- "class"
print.msg <- FALSE
lvls <- as.character(sort(unique(data.ab[[level]])))
if (is.factor(data.ab[[level]])) {
data.ab[[level]] <- as.numeric(data.ab[[level]])
} else if (is.character(data.ab[[level]])) {
data.ab[[level]] <- as.numeric(factor(data.ab[[level]], labels=lvls))
}
agent.seq <- sort(unique(data.ab[[level]]))
i
i <- 1
all(data.ab$dose[data.ab[[level]]==agent.seq[i]]==0)
data.ab$class
data.ab$class[data.ab$dose==0]
data.ab$dose[data.ab$class==1]
df
df.class
df.class$class
df.class$dose[df.class==1]
devtools::load_all(".")
index <- add_index(df.class)
index$data.ab
index$data.ab$class
df.class
df.class$agent[df.class==1]
df.class
df.class$agent[df.class$class==1]
df.class$agent[df.class$class==1 & df.class$dose==0]
devtools::load_all(".")
index <- add_index(df.class)
z <- c(1,2,6,4,5)
z[1:3] <- 0
z
data.ab <- df
data.ab <- df.class
print.msg <- FALSE
lvls <- as.character(sort(unique(data.ab[[level]])))
if (is.factor(data.ab[[level]])) {
data.ab[[level]] <- as.numeric(data.ab[[level]])
} else if (is.character(data.ab[[level]])) {
data.ab[[level]] <- as.numeric(factor(data.ab[[level]], labels=lvls))
}
agent.seq <- sort(unique(data.ab[[level]]))
i
any(data.ab$dose[data.ab[[level]]==agent.seq[i]]==0)
all(data.ab$dose[data.ab[[level]]==agent.seq[i]]==0)
if (lvls[1]!="Placebo") {
# Add "Placebo"
lvls <- c("Placebo", lvls)
}
lvls
data.ab[[level]][data.ab[[level]]==agent.seq[i] & data.ab$dose==0]
data.ab[[level]][data.ab[[level]]==agent.seq[i]]
for (i in seq_along(agent.seq)) {
# If all doses of a particular agent/class = 0 then recode to "Placebo"
if (all(data.ab$dose[data.ab[[level]]==agent.seq[i]]==0)) {
if (lvls[1]!="Placebo") {
# Swap current lvls for "Placebo"
lvls <- c("Placebo", lvls[-agent.seq[i]])
}
data.ab[[level]][data.ab[[level]]==agent.seq[i]] <- 0
print.msg <- TRUE
} else if (any(data.ab$dose[data.ab[[level]]==agent.seq[i]]==0)) {
# Else if agent/class contains any dose=0, convert those doses to "Placebo"
if (lvls[1]!="Placebo") {
# Add "Placebo"
lvls <- c("Placebo", lvls)
}
data.ab[[level]][data.ab[[level]]==agent.seq[i] & data.ab$dose==0] <- 0
print.msg <- TRUE
}
}
data.ab$class
as.numeric(factor(data.ab[[level]], labels=lvls))
recode.agent(df.class, level="class")
test <- recode.agent(df.class, level="class")
test$data.ab$class
test <- add_index(data.ab)
test$data.ab$class
test <- recode.agent(df.class, level="class")
test$lvlnames
recoded <- recode.agent(data.ab, level = "class")
classes <- recoded[["lvlnames"]]
# Generate class key
#classdata <- data.ab[, names(data.ab) %in% c("agent", "class")]
classdata <- recoded$data.ab[, names(recoded$data.ab) %in% c("agent", "class")]
classkey <- unique(classdata)
classkey$agent <- factor(classkey$agent, labels=agents)
classkey$class <- factor(classkey$class, labels=classes)
classdata
recoded$data.ab$class
classes
classdata$class
classkey
classdata <- recoded$data.ab[, names(recoded$data.ab) %in% c("agent", "class")]
classkey <- unique(classdata)
classkey
classes
classes <- recoded[["lvlnames"]]
classss
classes
recoded <- recode.agent(data.ab, level = "class")
classes <- recoded[["lvlnames"]]
classes
recoded$data.ab$class
lvls
as.numeric(factor(data.ab[[level]], labels=lvls))
lvls
devtools::load_all(".")
recoded <- recode.agent(data.ab, level = "class")
classes <- recoded[["lvlnames"]]
classes
recoded$lvlnames
recoded$data.ab$class
devtools::load_all(".")
recoded <- recode.agent(data.ab, level = "class")
classes <- recoded[["lvlnames"]]
devtools::load_all(".")
recoded <- recode.agent(data.ab, level = "class")
classes <- recoded[["lvlnames"]]
devtools::load_all(".")
recoded <- recode.agent(data.ab, level = "class")
classes <- recoded[["lvlnames"]]
classes
devtools::load_all(".")
recoded <- recode.agent(data.ab, level = "class")
classes <- recoded[["lvlnames"]]
classes
devtools::load_all(".")
recoded <- recode.agent(data.ab, level = "class")
classes <- recoded[["lvlnames"]]
lvls
df.class$dose[df.class$class==2]
data.ab <- df.class
lvls <- as.character(sort(unique(data.ab[[level]])))
print(lvls)
if (is.factor(data.ab[[level]])) {
data.ab[[level]] <- as.numeric(data.ab[[level]])
} else if (is.character(data.ab[[level]])) {
data.ab[[level]] <- as.numeric(factor(data.ab[[level]], labels=lvls))
}
agent.seq <- sort(unique(data.ab[[level]]))
for (i in seq_along(agent.seq)) {
# If all doses of a particular agent/class = 0 then recode to "Placebo"
if (all(data.ab$dose[data.ab[[level]]==agent.seq[i]]==0)) {
if (lvls[1]!="Placebo") {
# Swap current lvls for "Placebo"
lvls <- c("Placebo", lvls[-agent.seq[i]])
print("IM OUT")
}
data.ab[[level]][data.ab[[level]]==agent.seq[i]] <- 0
print.msg <- TRUE
} else if (any(data.ab$dose[data.ab[[level]]==agent.seq[i]]==0)) {
# Else if agent/class contains any dose=0, convert those doses to "Placebo"
if (lvls[1]!="Placebo") {
# Add "Placebo"
lvls <- c("Placebo", lvls)
}
data.ab[[level]][data.ab[[level]]==agent.seq[i] & data.ab$dose==0] <- 0
print.msg <- TRUE
}
}
lvls
devtools::load_all(".")
recoded <- recode.agent(df.class, level = "class")
recoded$lvlnames
recoded$data.ab$class
index <- add_index(df.class)
expect_equal(index[["treatments"]][1], "Placebo_0")
expect_equal(index[["agents"]][1], "Placebo")
expect_equal(index[["classes"]][1], "Placebo")
lvls <- c("treatments", "agents", "classes")
lvl <- c("treatment", "agent", "class")
for (i in seq_along(lvls)) {
expect_equal(length(index[[lvls[i]]]), length(unique(index$data.ab[[lvl[i]]])))
}
i
index$data.ab$class
index <- recode.agent(df.class, level="class")
index$data.ab$class
data.ab <- df.class
recoded <- recode.agent(data.ab, level = "class")
classes <- recoded[["lvlnames"]]
classes
recoded$data.ab$class
classdata <- recoded$data.ab[, names(recoded$data.ab) %in% c("agent", "class")]
classkey <- unique(classdata)
classkey$agent <- factor(classkey$agent, labels=agents)
classkey$class <- factor(classkey$class, labels=classes)
classdata
classdata$class
classkey
add_index <- function(data.ab) {
# Run Checks
checkmate::assertDataFrame(data.ab)
if ("agent" %in% names(data.ab)) {
recoded <- recode.agent(data.ab, level = "agent")
agents <- recoded[["lvlnames"]]
data.ab <- recoded[["data.ab"]]
# Generate treatment labels
treatments.df <- recoded[["data.ab"]]
treatments.df$agent <- factor(treatments.df$agent, labels=agents)
treatments.df <- dplyr::arrange(treatments.df, agent, dose)
treatments <- unique(paste(treatments.df$agent, treatments.df$dose, sep="_"))
# Generate treatment variable
data.ab$treatment <- as.numeric(factor(paste(data.ab$agent,
data.ab$dose,
sep="_"),
labels=treatments
))
data.ab <- dplyr::arrange(data.ab, studyID, agent, dose)
}
#### Add indices
# Do not run this function with pylr loaded!!
data.ab <- data.ab %>%
dplyr::group_by(studyID) %>%
dplyr::mutate(arm = sequence(n()))
data.ab <- data.ab %>%
dplyr::group_by(studyID) %>%
dplyr::mutate(narm=n())
# Reorder columns in data.ab
ord <- c("agent", "dose", "treatment", "class", "narm", "arm", "y", "se", "r", "E", "N")
newdat <- data.frame("studyID"=data.ab$studyID)
for (i in seq_along(ord)) {
if (ord[i] %in% names(data.ab)) {
newdat <- cbind(newdat, data.ab[,which(names(data.ab)==ord[i])])
}
}
olddat <- data.ab[,!(names(data.ab) %in% c("studyID", ord))]
newdat <- cbind(newdat, olddat)
output <- list("data.ab"=newdat)
if ("agent" %in% names(data.ab)) {
output[["agents"]] <- agents
output[["treatments"]] <- treatments
}
# Store class labels and recode (if they exist in data.ab)
if ("class" %in% names(data.ab)) {
recoded <- recode.agent(data.ab, level = "class")
classes <- recoded[["lvlnames"]]
# Generate class key
#classdata <- data.ab[, names(data.ab) %in% c("agent", "class")]
classdata <- recoded$data.ab[, names(recoded$data.ab) %in% c("agent", "class")]
classkey <- unique(classdata)
classkey$agent <- factor(classkey$agent, labels=agents)
classkey$class <- factor(classkey$class, labels=classes)
output[["classes"]] <- classes
output[["classkey"]] <- classkey
}
return(output)
}
index <- add_index(df.class)
index$data.ab$class
