network <- mbnma.network(HF2PPITT)
?plot
?summary
?print
?cat
?return
?list
devtools::document()
library(MBNMAdose)
?rank
network <- mbnma.network(HF2PPITT)
loops <- inconsistency.loops(network$data.ab)
loops
network
split <- nma.nodesplit(network, likelihood = "binomial", link="logit",
method="random", comparisons=rbind(c("eletriptan_0.5", "sumatriptan_0.5")))
split <- nma.nodesplit(network, likelihood = "binomial", link="logit",
method="random", comparisons=rbind(c(6,23), c(6,12)))
split <- nma.nodesplit(network, likelihood = "binomial", link="logit",
method="random", comparisons=rbind(c("eletriptan_0.5", "sumatriptan_0.5")))
split <- nma.nodesplit(network, likelihood = "binomial", link="logit",
method="random", comparisons=rbind(c(2, 5)))
network <- mbnma.network(HF2PPITT)
netgout <- mbnma.network(GoutSUA_2wkCFB)
netalog <- mbnma.network(alog_pcfb)
netclass <- mbnma.network(osteopain_2wkabs)
datalist <- list(HF2PPITT, GoutSUA_2wkCFB, alog_pcfb)
# Generate data without placebo
noplac.df <- network$data.ab[network$data.ab$narm>2 & network$data.ab$agent!=1,]
net.noplac <- mbnma.network(noplac.df)
netlist <- list(network, net.noplac)
# Models
linear <- mbnma.run(mbnma.network(alog_pcfb), fun="linear")
emax <- mbnma.emax(netgout, emax="rel", ed50="rel", method="random")
emax.tript <- mbnma.emax(network, emax="rel", ed50="rel", method="random")
emax.class <- mbnma.emax(netclass, emax="rel", ed50="random", method="common",
class.effect=list(emax="random"))
emax.class2 <- mbnma.emax(netclass, emax="rel", ed50="rel", method="common",
class.effect=list(emax="random"))
nonparam <- mbnma.run(network, fun="nonparam.up")
emax.noplac <- mbnma.emax(net.noplac, emax="rel", ed50="rel", method="random")
resdev <- mbnma.linear(network, parameters.to.save = "resdev")
modellist <- list(linear, emax, emax.class, emax.noplac)
###################################################
################## Run Tests ######################
###################################################
testthat::test_that("plot.mbnma functions correctly", {
for (i in seq_along(modellist)) {
expect_silent(plot(modellist[[i]]))
}
expect_equal("ggplot" %in% class(plot(nonparam)), TRUE)
# Test number of panels is equal to number of rel effect parameters
g <- plot(emax)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 2)
g <- plot(emax.class)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
# params argument
expect_error(plot(emax, params="rabbit"))
g <- plot(emax, params = "d.emax")
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
# Agent labs
expect_silent(plot(emax, agent.labs = netgout$agents))
expect_error(plot(emax, agent.labs = netgout$agents[-3]))
# Class labs
expect_silent(
plot(emax.class2, agent.labs = netclass$agents, class.labs=netclass$classes))
# No relative effects saved
expect_error(plot(resdev))
})
for (i in seq_along(modellist)) {
expect_silent(plot(modellist[[i]]))
}
expect_equal("ggplot" %in% class(plot(nonparam)), TRUE)
library(testthat)
testthat::test_that("plot.mbnma functions correctly", {
for (i in seq_along(modellist)) {
expect_silent(plot(modellist[[i]]))
}
expect_equal("ggplot" %in% class(plot(nonparam)), TRUE)
# Test number of panels is equal to number of rel effect parameters
g <- plot(emax)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 2)
g <- plot(emax.class)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
# params argument
expect_error(plot(emax, params="rabbit"))
g <- plot(emax, params = "d.emax")
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
# Agent labs
expect_silent(plot(emax, agent.labs = netgout$agents))
expect_error(plot(emax, agent.labs = netgout$agents[-3]))
# Class labs
expect_silent(
plot(emax.class2, agent.labs = netclass$agents, class.labs=netclass$classes))
# No relative effects saved
expect_error(plot(resdev))
})
for (i in seq_along(modellist)) {
expect_silent(plot(modellist[[i]]))
}
expect_equal("ggplot" %in% class(plot(nonparam)), TRUE)
modellist
testthat::test_that("plot.mbnma functions correctly", {
for (i in seq_along(modellist)) {
expect_silent(plot(modellist[[i]]))
}
expect_equal("ggplot" %in% class(plot(nonparam)), TRUE)
# Test number of panels is equal to number of rel effect parameters
g <- plot(emax)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 2)
g <- plot(emax.class)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
# params argument
expect_error(plot(emax, params="rabbit"))
g <- plot(emax, params = "d.emax")
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 1)
# Agent labs
expect_silent(plot(emax, agent.labs = netgout$agents))
expect_error(plot(emax, agent.labs = netgout$agents[-3]))
# Class labs
expect_silent(
plot(emax.class2, agent.labs = netclass$agents, class.labs=netclass$classes))
# No relative effects saved
expect_error(plot(resdev))
})
library(MBNMAdose)
for (i in seq_along(modellist)) {
expect_silent(plot(modellist[[i]]))
}
expect_equal("ggplot" %in% class(plot(nonparam)), TRUE)
plot(nonparam)
g <- plot(emax)
expect_equal(length(unique(g$data[[names(g$facet$params$facets)]])), 2)
g
g$data
unique(g$data[[names(g$facet$params$facets)]])
names(g$facet$params$facets)
g$facet$params$facets
g$facet$params$facets$`plotdata$doseparam`
g$data$doseparam
testthat::test_that("plot.mbnma functions correctly", {
for (i in seq_along(modellist)) {
expect_silent(plot(modellist[[i]]))
}
expect_equal("ggplot" %in% class(plot(nonparam)), TRUE)
# Test number of panels is equal to number of rel effect parameters
g <- plot(emax)
expect_equal(length(unique(g$data$doseparam)), 2)
g <- plot(emax.class)
expect_equal(length(unique(g$data$doseparam)), 1)
# params argument
expect_error(plot(emax, params="rabbit"))
g <- plot(emax, params = "d.emax")
expect_equal(length(unique(g$data$doseparam)), 1)
# Agent labs
expect_silent(plot(emax, agent.labs = netgout$agents))
expect_error(plot(emax, agent.labs = netgout$agents[-3]))
# Class labs
expect_silent(
plot(emax.class2, agent.labs = netclass$agents, class.labs=netclass$classes))
# No relative effects saved
expect_error(plot(resdev))
})
devtools::document()
?devtools::check_cran()
?devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
version
install.packages("scales")
install.packages("tidyverse")
install.packages("R2jags")
install.packages("checkmate")
install.packages("testthat")
install.packages("reshape2")
install.packages("Rdpack")
install.packages("overlapping")
install.packages("igraph")
install.packages("RColorBrewer")
install.packages("mcmcplots")
library(MBNMAdose)
network <- mbnma.network(HF2PPITT)
netgout <- mbnma.network(GoutSUA_2wkCFB)
netalog <- mbnma.network(alog_pcfb)
netpain <- mbnma.network(osteopain_2wkabs)
netclass <- mbnma.network(osteopain_2wkabs)
# Generate data without placebo
noplac.df <- network$data.ab[network$data.ab$narm>2 & network$data.ab$agent!=1,]
net.noplac <- mbnma.network(noplac.df)
linear <- mbnma.run(netpain, fun="linear")
emax <- mbnma.emax(network, emax="rel", ed50="rel", method="random")
ref.df <- network$data.ab[network$data.ab$agent==1,]
result <- ref.synth(ref.df, mbnma=emax, synth="fixed")
expect_equal(length(result), 1)
expect_equal(names(result)=="m.mu", TRUE)
expect_equal(nrow(result$m.mu), emax$BUGSoutput$n.sims)
ref.df <- netalog$data.ab[netalog$data.ab$agent==2,]
expect_error(ref.synth(ref.df, mbnma=linear, synth="fixed"))
ref.df <- netalog$data.ab[netalog$data.ab$agent==2 & netalog$data.ab$dose==25,]
expect_error(ref.synth(ref.df, mbnma=linear, synth="fixed"), NA)
expect_error(ref.synth(ref.df, mbnma=emax.noplac, synth="arndom"))
ref.df <- network$data.ab[network$data.ab$agent==1,]
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500)
expect_identical(names(result), c("m.mu", "sd.mu"))
expect_equal(nrow(result$sd.mu), 1500)
library(testthat)
ref.df <- network$data.ab[network$data.ab$agent==1,]
result <- ref.synth(ref.df, mbnma=emax, synth="fixed")
expect_equal(length(result), 1)
expect_equal(names(result)=="m.mu", TRUE)
expect_equal(nrow(result$m.mu), emax$BUGSoutput$n.sims)
ref.df <- netalog$data.ab[netalog$data.ab$agent==2,]
expect_error(ref.synth(ref.df, mbnma=linear, synth="fixed"))
ref.df <- netalog$data.ab[netalog$data.ab$agent==2 & netalog$data.ab$dose==25,]
expect_error(ref.synth(ref.df, mbnma=linear, synth="fixed"), NA)
expect_error(ref.synth(ref.df, mbnma=emax.noplac, synth="arndom"))
ref.df <- network$data.ab[network$data.ab$agent==1,]
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500)
expect_identical(names(result), c("m.mu", "sd.mu"))
expect_equal(nrow(result$sd.mu), 1500)
emax <- mbnma.emax(network, emax="rel", ed50="rel", method="random")
emax.noplac <- mbnma.emax(net.noplac, emax="rel", ed50="rel", method="random")
ref.df <- network$data.ab[network$data.ab$agent==1,]
result <- ref.synth(ref.df, mbnma=emax, synth="fixed")
expect_equal(length(result), 1)
expect_equal(names(result)=="m.mu", TRUE)
expect_equal(nrow(result$m.mu), emax$BUGSoutput$n.sims)
ref.df <- netalog$data.ab[netalog$data.ab$agent==2,]
expect_error(ref.synth(ref.df, mbnma=linear, synth="fixed"))
ref.df <- netalog$data.ab[netalog$data.ab$agent==2 & netalog$data.ab$dose==25,]
expect_error(ref.synth(ref.df, mbnma=linear, synth="fixed"), NA)
expect_error(ref.synth(ref.df, mbnma=emax.noplac, synth="arndom"))
ref.df <- network$data.ab[network$data.ab$agent==1,]
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500)
expect_identical(names(result), c("m.mu", "sd.mu"))
expect_equal(nrow(result$sd.mu), 1500)
ref.df <- netalog$data.ab[netalog$data.ab$agent==2 & netalog$data.ab$dose==25,]
expect_error(ref.synth(ref.df, mbnma=linear, synth="fixed"), NA)
expect_error(ref.synth(ref.df, mbnma=emax.noplac, synth="arndom"))
ref.df <- network$data.ab[network$data.ab$agent==1,]
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500)
emax.noplac$BUGSoutput$n.iter
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500)
ref.df <- network$data.ab[network$data.ab$agent==1,]
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500)
result
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500)
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1)
devtools::load()
install.packages("devtools")
devtools::load()
devtools::load_all()
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500)
?R2jags::jags
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=2000000)
devtools::load_all()
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500)
ref.df <- network$data.ab[network$data.ab$agent==1,]
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500)
expect_error(ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500))
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500, n.burnin = 500)
expect_identical(names(result), c("m.mu", "sd.mu"))
expect_equal(nrow(result$sd.mu), 1500)
expect_equal(nrow(result$sd.mu), 1500-500)
expect_equal(nrow(result$sd.mu), 1500-100)
nrow(result$m.mu)
expect_equal(nrow(result$sd.mu), 600)
ref.df <- network$data.ab[network$data.ab$agent==1,]
expect_error(ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500))
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500, n.burnin = 500)
expect_identical(names(result), c("m.mu", "sd.mu"))
expect_equal(nrow(result$sd.mu), 600)
devtools::document()
install.packages("gemtc")
devtools::document()
library(Rdpack)
install.packages(Rdpack)
install.packages("Rdpack")
install.packages("Rdpack")
devtools::document()
?Rdpack
devtools::document()
?mbnma.run
rmarkdown::render("mbnma.run.Rd")
rmarkdown::render("~/mbnma.run.Rd")
rmarkdown::render("man//mbnma.run.Rd")
devtools::document()
library(MBNMAdose)
?devtools::document
devtools::document()
devtools::document()
devtools::check_man()
devtools::document()
devtools::check_man()
devtools::document()
devtools::document()
devtools::check_man()
devtools::document()
devtools::check_man()
devtools::document()
devtools::check_man()
devtools::document()
devtools::check_man()
devtools::document()
devtools::check_man()
devtools::document()
devtools::check_man()
devtools::document()
devtools::check_man()
devtools::document()
devtools::check_man()
devtools::load_all()
network <- mbnma.network(HF2PPITT)
netgout <- mbnma.network(GoutSUA_2wkCFB)
netalog <- mbnma.network(alog_pcfb)
netpain <- mbnma.network(osteopain_2wkabs)
netclass <- mbnma.network(osteopain_2wkabs)
# Generate data without placebo
noplac.df <- network$data.ab[network$data.ab$narm>2 & network$data.ab$agent!=1,]
net.noplac <- mbnma.network(noplac.df)
#### Models ####
linear <- mbnma.run(netpain, fun="linear")
emax <- mbnma.emax(network, emax="rel", ed50="rel", method="random")
emax.gout <- mbnma.emax(netgout, emax="rel", ed50="rel", method="random")
emax.class <- mbnma.emax(netclass, emax="rel", ed50="random", method="common",
class.effect=list(emax="random"))
testthat::test_that("ref.synth functions correctly", {
ref.df <- network$data.ab[network$data.ab$agent==1,]
result <- ref.synth(ref.df, mbnma=emax, synth="fixed")
expect_equal(length(result), 1)
expect_equal(names(result)=="m.mu", TRUE)
expect_equal(nrow(result$m.mu), emax$BUGSoutput$n.sims)
ref.df <- netalog$data.ab[netalog$data.ab$agent==2,]
expect_error(ref.synth(ref.df, mbnma=linear, synth="fixed"))
ref.df <- netalog$data.ab[netalog$data.ab$agent==2 & netalog$data.ab$dose==25,]
expect_error(ref.synth(ref.df, mbnma=linear, synth="fixed"), NA)
expect_error(ref.synth(ref.df, mbnma=emax.noplac, synth="arndom"))
ref.df <- network$data.ab[network$data.ab$agent==1,]
expect_error(ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500))
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500, n.burnin = 500)
expect_identical(names(result), c("m.mu", "sd.mu"))
expect_equal(nrow(result$sd.mu), 600)
})
testthat::test_that("ref.synth functions correctly", {
ref.df <- network$data.ab[network$data.ab$agent==1,]
result <- ref.synth(ref.df, mbnma=emax, synth="fixed")
expect_equal(length(result), 1)
expect_equal(names(result)=="m.mu", TRUE)
expect_equal(nrow(result$m.mu), emax$BUGSoutput$n.sims)
ref.df <- netalog$data.ab[netalog$data.ab$agent==2,]
expect_error(ref.synth(ref.df, mbnma=linear, synth="fixed"))
ref.df <- netalog$data.ab[netalog$data.ab$agent==2 & netalog$data.ab$dose==25,]
expect_error(ref.synth(ref.df, mbnma=linear, synth="fixed"), NA)
expect_error(ref.synth(ref.df, mbnma=emax.noplac, synth="arndom"))
ref.df <- network$data.ab[network$data.ab$agent==1,]
expect_error(ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500))
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500, n.burnin = 500)
expect_identical(names(result), c("m.mu", "sd.mu"))
expect_equal(nrow(result$sd.mu), 600)
})
testthat::test_that("ref.synth functions correctly", {
ref.df <- network$data.ab[network$data.ab$agent==1,]
result <- ref.synth(ref.df, mbnma=emax, synth="fixed")
expect_equal(length(result), 1)
expect_equal(names(result)=="m.mu", TRUE)
expect_equal(nrow(result$m.mu), emax$BUGSoutput$n.sims)
ref.df <- netalog$data.ab[netalog$data.ab$agent==2,]
expect_error(ref.synth(ref.df, mbnma=linear, synth="fixed"))
ref.df <- netalog$data.ab[netalog$data.ab$agent==2 & netalog$data.ab$dose==25,]
expect_error(ref.synth(ref.df, mbnma=linear, synth="fixed"), NA)
expect_error(ref.synth(ref.df, mbnma=emax.noplac, synth="arndom"))
ref.df <- network$data.ab[network$data.ab$agent==1,]
expect_error(ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=500))
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500, n.burnin = 500)
expect_identical(names(result), c("m.mu", "sd.mu"))
expect_equal(nrow(result$sd.mu), 600)
})
ref.df <- network$data.ab[network$data.ab$agent==1,]
ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=500)
expect_error(ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=500, n.burnin=5000))
result <- ref.synth(ref.df, mbnma=emax.noplac, synth="random", n.iter=1500, n.burnin = 500)
expect_identical(names(result), c("m.mu", "sd.mu"))
nrow(result$sd.mu)
library(MBNMAdose)
version
devtools::release()
