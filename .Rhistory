}
}
if (!is.null(arg.params)) {
if (!all((names(arg.params)) %in% c("wrap.params", "run.params"))) {
stop("arg.params has been incorrectly specified")
}
wrap.params <- arg.params$wrap.params
run.params <- arg.params$run.params
fun.params <- names(class.effect)
for (k in seq_along(fun.params)) {
for (m in seq_along(wrap.params)) {
if (wrap.params[m] %in% fun.params[k]) {
fun.params[k] <- run.params[m]
}
}
}
names(class.effect) <- fun.params
}
if (is.null(model.file)) {
model <- MBNMA.write(fun=fun, user.fun=user.fun,
beta.1=beta.1, beta.2=beta.2, beta.3=beta.3,
class.effect=class.effect,
likelihood=likelihood, link=link
)
# Change beta.1 and beta.2 to emax and et50, etc. if necessary
# NEED TO ADD SOMETHING HERE SPECIFIC TO MBNMAdose
if (!is.null(priors)) {
model <- replace.prior(priors=priors, model=model)
}
} else {
warning("All parameter specifications (dose-response parameters, class effects, priors, etc.) are being overwritten by `model.file`")
model <- model.file
}
if (is.null(arg.params)) {
wrap.params <- which(sapply(list(beta.1$method, beta.2$method, beta.3$method),
is.character))
}
cat(model)
devtools::load_all(".")
# Check/assign link and likelihood
if (is.null(likelihood)) {
if (all(c("r", "N") %in% names(network$data.ab))) {
likelihood <- "binomial"
message("`likelihood` not given by user - set to `binomial` based on data provided")
} else if (all(c("y", "se") %in% names(network$data.ab))) {
likelihood <- "normal"
message("`likelihood` not given by user - set to `normal` based on data provided")
} else if (all(c("r", "E") %in% names(network$data.ab))) {
likelihood <- "poisson"
message("`likelihood` not given by user - set to `poisson` based on data provided")
}
}
if (is.null(link)) {
if (likelihood=="binomial") {
link <- "logit"
message("`link` not given by user - set to `logit` based on assigned value for `likelihood`")
} else if (likelihood=="normal") {
link <- "identity"
message("`link` not given by user - set to `identity` based on assigned value for `likelihood`")
} else if (likelihood=="poisson") {
link <- "log"
message("`link` not given by user - set to `log` based on assigned value for `likelihood`")
}
}
if (!is.null(arg.params)) {
if (!all((names(arg.params)) %in% c("wrap.params", "run.params"))) {
stop("arg.params has been incorrectly specified")
}
wrap.params <- arg.params$wrap.params
run.params <- arg.params$run.params
fun.params <- names(class.effect)
for (k in seq_along(fun.params)) {
for (m in seq_along(wrap.params)) {
if (wrap.params[m] %in% fun.params[k]) {
fun.params[k] <- run.params[m]
}
}
}
names(class.effect) <- fun.params
}
if (is.null(model.file)) {
model <- MBNMA.write(fun=fun, user.fun=user.fun,
beta.1=beta.1, beta.2=beta.2, beta.3=beta.3,
class.effect=class.effect,
likelihood=likelihood, link=link
)
# Change beta.1 and beta.2 to emax and et50, etc. if necessary
# NEED TO ADD SOMETHING HERE SPECIFIC TO MBNMAdose
if (!is.null(priors)) {
model <- replace.prior(priors=priors, model=model)
}
} else {
warning("All parameter specifications (dose-response parameters, class effects, priors, etc.) are being overwritten by `model.file`")
model <- model.file
}
if (is.null(arg.params)) {
wrap.params <- which(sapply(list(beta.1$method, beta.2$method, beta.3$method),
is.character))
}
cat(model)
test <- MBNMA.run(network,
fun="emax",
beta.1=list(pool="rel", method="common"),
beta.2=list(pool="const", method="common")
)
devtools::load_all(".")
test <- MBNMA.run(network,
fun="emax",
beta.1=list(pool="rel", method="common"),
beta.2=list(pool="const", method="common")
)
# Check/assign link and likelihood
if (is.null(likelihood)) {
if (all(c("r", "N") %in% names(network$data.ab))) {
likelihood <- "binomial"
message("`likelihood` not given by user - set to `binomial` based on data provided")
} else if (all(c("y", "se") %in% names(network$data.ab))) {
likelihood <- "normal"
message("`likelihood` not given by user - set to `normal` based on data provided")
} else if (all(c("r", "E") %in% names(network$data.ab))) {
likelihood <- "poisson"
message("`likelihood` not given by user - set to `poisson` based on data provided")
}
}
if (is.null(link)) {
if (likelihood=="binomial") {
link <- "logit"
message("`link` not given by user - set to `logit` based on assigned value for `likelihood`")
} else if (likelihood=="normal") {
link <- "identity"
message("`link` not given by user - set to `identity` based on assigned value for `likelihood`")
} else if (likelihood=="poisson") {
link <- "log"
message("`link` not given by user - set to `log` based on assigned value for `likelihood`")
}
}
if (!is.null(arg.params)) {
if (!all((names(arg.params)) %in% c("wrap.params", "run.params"))) {
stop("arg.params has been incorrectly specified")
}
wrap.params <- arg.params$wrap.params
run.params <- arg.params$run.params
fun.params <- names(class.effect)
for (k in seq_along(fun.params)) {
for (m in seq_along(wrap.params)) {
if (wrap.params[m] %in% fun.params[k]) {
fun.params[k] <- run.params[m]
}
}
}
names(class.effect) <- fun.params
}
if (is.null(model.file)) {
model <- MBNMA.write(fun=fun, user.fun=user.fun,
beta.1=beta.1, beta.2=beta.2, beta.3=beta.3,
class.effect=class.effect,
likelihood=likelihood, link=link
)
# Change beta.1 and beta.2 to emax and et50, etc. if necessary
# NEED TO ADD SOMETHING HERE SPECIFIC TO MBNMAdose
if (!is.null(priors)) {
model <- replace.prior(priors=priors, model=model)
}
} else {
warning("All parameter specifications (dose-response parameters, class effects, priors, etc.) are being overwritten by `model.file`")
model <- model.file
}
if (is.null(arg.params)) {
wrap.params <- which(sapply(list(beta.1$method, beta.2$method, beta.3$method),
is.character))
}
cat(model)
library(MBNMA)
?WideDataToLongData
buildclasses(c("i", "i"))
MBNMA::buildclasses(c("i", "i"))
MBNMA:::buildclasses(c("i", "i"))
MBNMAresults <- runJagsMBNMA(longdata)
MBNMAresults <- runJagsMBNMA(HF2PPITT)
MBNMAresults <- runJagsMBNMA(data("HF2PPITTcd"))
MBNMAresults <- runJagsMBNMA(data("HF2PPITTcd"))
MBNMAresults <- runJagsMBNMA(WideDataToLongData(data("HF2PPITTcd")))
longdata <- WideDataToLongData(HF2PPITTcd)
MBNMAresults <- runJagsMBNMA(longdata)
MBNMAresults
MBNMAresults$model
test <- MBNMA.run(network,
fun="emax",
beta.1=list(pool="rel", method="common"),
beta.2=list(pool="const", method="common")
)
MBNMAresults$model$data
MBNMAresults$model$data()
devtools::load_all(".")
test <- MBNMA.run(network,
fun="emax",
beta.1=list(pool="rel", method="common"),
beta.2=list(pool="const", method="common")
)
devtools::load_all(".")
test <- MBNMA.run(network,
fun="emax",
beta.1=list(pool="rel", method="common"),
beta.2=list(pool="const", method="common")
)
test
devtools::load_all(".")
test <- MBNMA.run(network,
fun="emax",
beta.1=list(pool="rel", method="common"),
beta.2=list(pool="const", method="common")
)
test
# Check/assign link and likelihood
if (is.null(likelihood)) {
if (all(c("r", "N") %in% names(network$data.ab))) {
likelihood <- "binomial"
message("`likelihood` not given by user - set to `binomial` based on data provided")
} else if (all(c("y", "se") %in% names(network$data.ab))) {
likelihood <- "normal"
message("`likelihood` not given by user - set to `normal` based on data provided")
} else if (all(c("r", "E") %in% names(network$data.ab))) {
likelihood <- "poisson"
message("`likelihood` not given by user - set to `poisson` based on data provided")
}
}
if (is.null(link)) {
if (likelihood=="binomial") {
link <- "logit"
message("`link` not given by user - set to `logit` based on assigned value for `likelihood`")
} else if (likelihood=="normal") {
link <- "identity"
message("`link` not given by user - set to `identity` based on assigned value for `likelihood`")
} else if (likelihood=="poisson") {
link <- "log"
message("`link` not given by user - set to `log` based on assigned value for `likelihood`")
}
}
if (!is.null(arg.params)) {
if (!all((names(arg.params)) %in% c("wrap.params", "run.params"))) {
stop("arg.params has been incorrectly specified")
}
wrap.params <- arg.params$wrap.params
run.params <- arg.params$run.params
fun.params <- names(class.effect)
for (k in seq_along(fun.params)) {
for (m in seq_along(wrap.params)) {
if (wrap.params[m] %in% fun.params[k]) {
fun.params[k] <- run.params[m]
}
}
}
names(class.effect) <- fun.params
}
if (is.null(model.file)) {
model <- MBNMA.write(fun=fun, user.fun=user.fun,
beta.1=beta.1, beta.2=beta.2, beta.3=beta.3,
class.effect=class.effect,
likelihood=likelihood, link=link
)
# Change beta.1 and beta.2 to emax and et50, etc. if necessary
# NEED TO ADD SOMETHING HERE SPECIFIC TO MBNMAdose
if (!is.null(priors)) {
model <- replace.prior(priors=priors, model=model)
}
} else {
warning("All parameter specifications (dose-response parameters, class effects, priors, etc.) are being overwritten by `model.file`")
model <- model.file
}
if (is.null(arg.params)) {
wrap.params <- which(sapply(list(beta.1$method, beta.2$method, beta.3$method),
is.character))
}
assigned.parameters.to.save <- parameters.to.save
if (is.null(parameters.to.save)) {
parameters.to.save <-
gen.parameters.to.save(model.params=wrap.params, model=model)
}
parameters.to.save
cat(test$model.arg$jagscode)
wrap.params
devtools::load_all(".")
test <- MBNMA.run(network,
fun="emax",
beta.1=list(pool="rel", method="common"),
beta.2=list(pool="const", method="common")
)
test
test <- MBNMA.run(network,
fun="emax",
beta.1=list(pool="rel", method="common"),
beta.2=list(pool="const", method="common"),
parameters.to.save = "d.1"
)
test
parameters.to.save<- NULL
fun
beta.2
argcheck <- checkmate::makeAssertCollection()
checkmate::assertClass(network, "MBNMA.network", add=argcheck)
checkmate::assertCharacter(model.file, len=1, any.missing=FALSE, null.ok=TRUE, add=argcheck)
checkmate::assertChoice(pd, choices=c("pv", "pd.kl", "plugin", "popt"), null.ok=FALSE, add=argcheck)
checkmate::assertLogical(parallel, len=1, null.ok=FALSE, any.missing=FALSE, add=argcheck)
checkmate::assertList(arg.params, unique=TRUE, null.ok=TRUE, add=argcheck)
checkmate::assertList(priors, null.ok=TRUE, add=argcheck)
checkmate::reportAssertions(argcheck)
# Check/assign link and likelihood
if (is.null(likelihood)) {
if (all(c("r", "N") %in% names(network$data.ab))) {
likelihood <- "binomial"
message("`likelihood` not given by user - set to `binomial` based on data provided")
} else if (all(c("y", "se") %in% names(network$data.ab))) {
likelihood <- "normal"
message("`likelihood` not given by user - set to `normal` based on data provided")
} else if (all(c("r", "E") %in% names(network$data.ab))) {
likelihood <- "poisson"
message("`likelihood` not given by user - set to `poisson` based on data provided")
}
}
if (is.null(link)) {
if (likelihood=="binomial") {
link <- "logit"
message("`link` not given by user - set to `logit` based on assigned value for `likelihood`")
} else if (likelihood=="normal") {
link <- "identity"
message("`link` not given by user - set to `identity` based on assigned value for `likelihood`")
} else if (likelihood=="poisson") {
link <- "log"
message("`link` not given by user - set to `log` based on assigned value for `likelihood`")
}
}
if (!is.null(arg.params)) {
if (!all((names(arg.params)) %in% c("wrap.params", "run.params"))) {
stop("arg.params has been incorrectly specified")
}
wrap.params <- arg.params$wrap.params
run.params <- arg.params$run.params
fun.params <- names(class.effect)
for (k in seq_along(fun.params)) {
for (m in seq_along(wrap.params)) {
if (wrap.params[m] %in% fun.params[k]) {
fun.params[k] <- run.params[m]
}
}
}
names(class.effect) <- fun.params
}
if (is.null(model.file)) {
model <- MBNMA.write(fun=fun, user.fun=user.fun,
beta.1=beta.1, beta.2=beta.2, beta.3=beta.3,
class.effect=class.effect,
likelihood=likelihood, link=link
)
# Change beta.1 and beta.2 to emax and et50, etc. if necessary
# NEED TO ADD SOMETHING HERE SPECIFIC TO MBNMAdose
if (!is.null(priors)) {
model <- replace.prior(priors=priors, model=model)
}
} else {
warning("All parameter specifications (dose-response parameters, class effects, priors, etc.) are being overwritten by `model.file`")
model <- model.file
}
if (is.null(arg.params)) {
wrap.params <- which(sapply(list(beta.1$method, beta.2$method, beta.3$method),
is.character))
} else {
# Add wrapper code
}
wrap.params
parameters.to.save
assigned.parameters.to.save <- parameters.to.save
gen.parameters.to.save(model.params=wrap.params, model=model)
model.params <- wrap.params
checkmate::assertCharacter(model, len=1)
model.params <- as.character(model.params)
parameters.to.save <- vector()
model.params
grepl(paste0("d.", model.params[i], " ~"), model
)
cat(model)
devtools::load_all(".")
gen.parameters.to.save(model.params=wrap.params, model=model)
grepl(paste0("d.", model.params[i], "[k] ~"), model)
paste0("d.", model.params[i], "[k] ~")
i <- 1
paste0("d.", model.params[i], "[k] ~")
grepl(paste0("d.", model.params[i], "\\[k\\] ~"), model)
devtools::load_all(".")
gen.parameters.to.save(model.params=wrap.params, model=model)
devtools::load_all(".")
test <- MBNMA.run(network,
fun="emax",
beta.1=list(pool="rel", method="common"),
beta.2=list(pool="const", method="common")
)
test
test <- MBNMA.run(network,
fun="linear",
beta.1=list(pool="rel", method="common")
)
test
test <- MBNMA.run(network,
fun="linear",
beta.1=list(pool="rel", method="random")
)
test
test <- MBNMA.run(network,
fun="linear",
beta.1=list(pool="rel", method="common"),
n.iter=10000
)
test
test <- MBNMA.run(network,
fun="emax",
beta.1=list(pool="rel", method="common"),
beta.2=list(pool="const", method="common"),
n.iter=10000
)
test
test2 <- MBNMA.run(network,
fun="emax",
beta.1=list(pool="rel", method="common"),
beta.2=list(pool="const", method="random"),
n.iter=10000
)
test2
test4 <- MBNMA.run(network,
fun="emax",
beta.1=list(pool="rel", method="common"),
beta.2=list(pool="const", method="random"),
n.iter=10000,
class.effect = list(beta.2="common")
)
View(HF2PPITTcd)
test4 <- MBNMA.run(network,
fun="emax",
beta.1=list(pool="rel", method="common"),
beta.2=list(pool="rel", method="random"),
n.iter=10000,
class.effect = list(beta.2="common")
)
test4 <- MBNMA.run(network,
fun="emax",
beta.1=list(pool="rel", method="common"),
beta.2=list(pool="rel", method="random"),
n.iter=10000
)
beta.1=list(pool="rel", method="common")
beta.2=list(pool="rel", method="random")
# Check/assign link and likelihood
if (is.null(likelihood)) {
if (all(c("r", "N") %in% names(network$data.ab))) {
likelihood <- "binomial"
message("`likelihood` not given by user - set to `binomial` based on data provided")
} else if (all(c("y", "se") %in% names(network$data.ab))) {
likelihood <- "normal"
message("`likelihood` not given by user - set to `normal` based on data provided")
} else if (all(c("r", "E") %in% names(network$data.ab))) {
likelihood <- "poisson"
message("`likelihood` not given by user - set to `poisson` based on data provided")
}
}
if (is.null(link)) {
if (likelihood=="binomial") {
link <- "logit"
message("`link` not given by user - set to `logit` based on assigned value for `likelihood`")
} else if (likelihood=="normal") {
link <- "identity"
message("`link` not given by user - set to `identity` based on assigned value for `likelihood`")
} else if (likelihood=="poisson") {
link <- "log"
message("`link` not given by user - set to `log` based on assigned value for `likelihood`")
}
}
if (!is.null(arg.params)) {
if (!all((names(arg.params)) %in% c("wrap.params", "run.params"))) {
stop("arg.params has been incorrectly specified")
}
wrap.params <- arg.params$wrap.params
run.params <- arg.params$run.params
fun.params <- names(class.effect)
for (k in seq_along(fun.params)) {
for (m in seq_along(wrap.params)) {
if (wrap.params[m] %in% fun.params[k]) {
fun.params[k] <- run.params[m]
}
}
}
names(class.effect) <- fun.params
}
if (is.null(model.file)) {
model <- MBNMA.write(fun=fun, user.fun=user.fun,
beta.1=beta.1, beta.2=beta.2, beta.3=beta.3,
class.effect=class.effect,
likelihood=likelihood, link=link
)
# Change beta.1 and beta.2 to emax and et50, etc. if necessary
# NEED TO ADD SOMETHING HERE SPECIFIC TO MBNMAdose
if (!is.null(priors)) {
model <- replace.prior(priors=priors, model=model)
}
} else {
warning("All parameter specifications (dose-response parameters, class effects, priors, etc.) are being overwritten by `model.file`")
model <- model.file
}
if (is.null(arg.params)) {
wrap.params <- which(sapply(list(beta.1$method, beta.2$method, beta.3$method),
is.character))
} else {
# Add wrapper code
}
cat(model)
